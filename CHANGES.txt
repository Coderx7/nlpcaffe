git diff d02bb2c --name-status
M	.gitignore
A	CHANGES.txt
M	README.md
A	data/ptb/get_ptb.sh
A	examples/ptb/create_ptb.py
A	examples/ptb/ptb_visualization.ipynb
A	examples/ptb/train_ptb.sh
M	include/caffe/common_layers.hpp
M	include/caffe/net.hpp
M	include/caffe/test/test_gradient_check_util.hpp
M	include/caffe/util/math_functions.hpp
M	include/caffe/vision_layers.hpp
M	python/caffe/classifier.py
M	src/caffe/layers/concat_layer.cpp
M	src/caffe/layers/concat_layer.cu
A	src/caffe/layers/lstm_layer.cpp
A	src/caffe/layers/lstm_layer.cu
M	src/caffe/layers/slice_layer.cpp
M	src/caffe/layers/slice_layer.cu
A	src/caffe/layers/wordvec_layer.cpp
A	src/caffe/layers/wordvec_layer.cu
M	src/caffe/net.cpp
M	src/caffe/proto/caffe.proto
M	src/caffe/solver.cpp
M	src/caffe/test/test_gradient_based_solver.cpp
A	src/caffe/test/test_lstm_layer.cpp
M	src/caffe/test/test_net.cpp
M	src/caffe/test/test_slice_layer.cpp
A	src/caffe/test/test_wordvec_layer.cpp
M	src/caffe/util/math_functions.cu

git diff d02bb2c
diff --git a/.gitignore b/.gitignore
index 28f2aca..5950eed 100644
--- a/.gitignore
+++ b/.gitignore
@@ -59,12 +59,15 @@ Makefile.config
 # 1. reference, and not casually committed
 # 2. custom, and live on their own unless they're deliberated contributed
 data/*
-models/*
+#models/*
 *.caffemodel
 *.solverstate
 *.binaryproto
 *leveldb
 *lmdb
+*mdb
+*lock
+*prototxt
 
 # build, distribute, and bins (+ python proto bindings)
 build
@@ -84,6 +87,17 @@ _site
 doxygen
 docs/dev
 
+# Sublime Text settings
+*.sublime-workspace
+*.sublime-project
+
+# Eclipse Project settings
+*.*project
+
+# CMake generated files
+*.gen.cmake
+
+=======
 # LevelDB files
 *.sst
 *.ldb
diff --git a/CHANGES.txt b/CHANGES.txt
new file mode 100644
index 0000000..c44d85d
--- /dev/null
+++ b/CHANGES.txt
@@ -0,0 +1,33 @@
+git diff d02bb2c --name-status
+M	.gitignore
+A	CHANGES.txt
+M	README.md
+A	data/ptb/get_ptb.sh
+A	examples/ptb/create_ptb.py
+A	examples/ptb/ptb_visualization.ipynb
+A	examples/ptb/train_ptb.sh
+M	include/caffe/common_layers.hpp
+M	include/caffe/net.hpp
+M	include/caffe/test/test_gradient_check_util.hpp
+M	include/caffe/util/math_functions.hpp
+M	include/caffe/vision_layers.hpp
+M	python/caffe/classifier.py
+M	src/caffe/layers/concat_layer.cpp
+M	src/caffe/layers/concat_layer.cu
+A	src/caffe/layers/lstm_layer.cpp
+A	src/caffe/layers/lstm_layer.cu
+M	src/caffe/layers/slice_layer.cpp
+M	src/caffe/layers/slice_layer.cu
+A	src/caffe/layers/wordvec_layer.cpp
+A	src/caffe/layers/wordvec_layer.cu
+M	src/caffe/net.cpp
+M	src/caffe/proto/caffe.proto
+M	src/caffe/solver.cpp
+M	src/caffe/test/test_gradient_based_solver.cpp
+A	src/caffe/test/test_lstm_layer.cpp
+M	src/caffe/test/test_net.cpp
+M	src/caffe/test/test_slice_layer.cpp
+A	src/caffe/test/test_wordvec_layer.cpp
+M	src/caffe/util/math_functions.cu
+
+git diff d02bb2c
diff --git a/README.md b/README.md
index ebec286..136c1cb 100644
--- a/README.md
+++ b/README.md
@@ -1,34 +1,44 @@
-# Caffe
+# NLP-Caffe
 
-Caffe is a deep learning framework made with expression, speed, and modularity in mind.
-It is developed by the Berkeley Vision and Learning Center ([BVLC](http://bvlc.eecs.berkeley.edu)) and community contributors.
+NLP-Caffe is a <a href="https://github.com/Russell91/nlp_caffe/blob/master/CHANGES.txt" target="_blank">pull request</a> [1] on the Caffe framework developed by Yangqing Jia and Evan Shelhamer, among other members of the BVLC lab at Berkeley and a large number of independent online contributers. 
 
-Check out the [project site](http://caffe.berkeleyvision.org) for all the details like
+This fork makes it easier for NLP users to get started without merging C++ code. The current example constructs a mid-size language model for the Penn Tree Bank using LSTMs that processes in excess of 15,000 words per second [2] and achieves a perplexity of 142. More examples for Machine Translation using the encoder-decoder model and character-level RNNs are in the works. Hopefully, this code will eventually be merged into the Caffe master branch. This work was funded by the <a href="http://nlp.stanford.edu/" target="_blank">Stanford NLP Group</a>, under the guidance of <a href="http://nlp.stanford.edu/~manning/" target="_blank">Chris Manning</a>, and with the invaluable expertise of <a href="http://stanford.edu/~lmthang/" target="_blank">Thang Luong</a>.
 
-- [DIY Deep Learning for Vision with Caffe](https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.p)
-- [Tutorial Documentation](http://caffe.berkeleyvision.org/tutorial/)
-- [BVLC reference models](http://caffe.berkeleyvision.org/model_zoo.html) and the [community model zoo](https://github.com/BVLC/caffe/wiki/Model-Zoo)
-- [Installation instructions](http://caffe.berkeleyvision.org/installation.html)
+# Installation
 
-and step-by-step examples.
+We recommend consulting the Caffe <a href="http://caffe.berkeleyvision.org/installation.html" target="_blank">installation instructions</a> and compiling the standard Caffe library first. Next, clone this repo and run `make -j8 && make pycaffe` from the NLP-Caffe folder.
 
-[![Join the chat at https://gitter.im/BVLC/caffe](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/BVLC/caffe?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+NLP-Caffe also requires <a href="https://github.com/dw/py-lmdb/" target="_blank">py-lmdb</a>, which can be installed with:
 
-Please join the [caffe-users group](https://groups.google.com/forum/#!forum/caffe-users) or [gitter chat](https://gitter.im/BVLC/caffe) to ask questions and talk about methods and models.
-Framework development discussions and thorough bug reports are collected on [Issues](https://github.com/BVLC/caffe/issues).
+    pip install py-lmdb
 
-Happy brewing!
+# Tutorial
 
-## License and Citation
+First, cd to the caffe root directory and download the data for the Penn Tree Bank with:
 
-Caffe is released under the [BSD 2-Clause license](https://github.com/BVLC/caffe/blob/master/LICENSE).
-The BVLC reference models are released for unrestricted use.
+    ./data/ptb/get_ptb.sh
 
-Please cite Caffe in your publications if it helps your research:
+Using this data, you can generate the LMDB databases and the architecture train_val.prototxt with:
 
-    @article{jia2014caffe,
-      Author = {Jia, Yangqing and Shelhamer, Evan and Donahue, Jeff and Karayev, Sergey and Long, Jonathan and Girshick, Ross and Guadarrama, Sergio and Darrell, Trevor},
-      Journal = {arXiv preprint arXiv:1408.5093},
-      Title = {Caffe: Convolutional Architecture for Fast Feature Embedding},
-      Year = {2014}
-    }
+    python ./examples/ptb/create_ptb.py --make_data
+
+You'll notice this generates train, test, and validation databases in examples/ptb. It also generates the train_val.prototxt architecture file and the solver.prototxt hyperparameter file. By editing this file, you can control the hyperparameters, dataset, and architecture used by NLP-Caffe with a python interface.
+
+You can now begin to train the network with:
+
+    ./examples/ptb/train_ptb.sh
+
+The resulting wordvectors can be viewed with:
+
+    ipython notebook ./examples/ptb/ptb_visualization.ipynb
+
+# Further reading
+
+To get a better general understanding of how Caffe works, you can take advantage of the content in the <a href="http://caffe.berkeleyvision.org/installation.html" target="_blank">caffe tutorials section</a>. In particular, the <a href="http://nbviewer.ipython.org/github/BVLC/caffe/blob/master/examples/filter_visualization.ipynb" target="_blank">filter visualization tutorial</a> is a great example of how you can use the IPython notebook to investigate the weights and performance of a trained model. The <a href="http://caffe.berkeleyvision.org/gathered/examples/mnist.html" target="_blank">MNIST tutorial</a> is useful to understand how you can control Caffe over the command line and through architecture description text files.
+
+<br>
+<br>
+
+[1] All citations should be addressed to the <a href="https://github.com/BVLC/caffe" target="_blank">main Caffe repository</a>. Licensing is identical to that of a Caffe pull request.
+
+[2] The average sentence has 19.85 words when long sentences are capped to 30 words. We train batches of 128 sentences with an average batch time of 0.128 s on a Nvidia GTX 780 TI.
diff --git a/data/ptb/get_ptb.sh b/data/ptb/get_ptb.sh
new file mode 100755
index 0000000..16d2075
--- /dev/null
+++ b/data/ptb/get_ptb.sh
@@ -0,0 +1,14 @@
+#!/usr/bin/env sh
+# This scripts downloads the ptb data and unzips it.
+
+DIR="$( cd "$(dirname "$0")" ; pwd -P )"
+cd $DIR
+
+echo "Downloading..."
+
+wget stewart.guru/s/ptb/vocab.pkl
+wget stewart.guru/s/ptb/train_indices.txt
+wget stewart.guru/s/ptb/valid_indices.txt
+wget stewart.guru/s/ptb/test_indices.txt
+
+echo "Done."
diff --git a/examples/ptb/create_ptb.py b/examples/ptb/create_ptb.py
new file mode 100755
index 0000000..85b691f
--- /dev/null
+++ b/examples/ptb/create_ptb.py
@@ -0,0 +1,336 @@
+#!/usr/bin/env python
+import sys
+import lmdb
+import random
+import subprocess
+import itertools
+import argparse
+import numpy as np
+sys.path.append('python/caffe/proto'); import caffe_pb2
+
+from caffe_pb2 import NetParameter, LayerParameter, DataParameter, SolverParameter, ParamSpec
+from caffe_pb2 import Datum
+
+def make_data(param):
+    for phase in ['train', 'valid', 'test']:
+        print 'Starting %s' % phase
+        db_name = './examples/ptb/ptb_%s_db' % phase
+        subprocess.call(['rm', '-rf', db_name])
+        env = lmdb.open(db_name, map_size=2147483648*8)
+
+        def vocab_transform(target_input):
+            def t_foo(x):
+                return x if x < param['unknown_symbol'] else param['unknown_symbol']
+
+            target_line = [t_foo(int(x)) for x in target_input.split(' ')[:param['maximum_length']]]
+
+            target_line = target_line[:param['maximum_length']] + \
+                          [param['zero_symbol']] * (param['maximum_length'] - len(target_line[:param['maximum_length']]))
+            assert len(target_line) == param['maximum_length']
+            return target_line
+
+        allX = []
+        with open('./data/ptb/%s_indices.txt' % phase, 'r') as f1:
+            for en in f1.readlines():
+                allX.append(vocab_transform(en))
+
+        print 'Writing %s sentences' % len(allX)
+
+        with env.begin(write=True) as txn:
+            for i, target_line in enumerate(allX):
+                datum = Datum()
+                datum.channels = 2 * param['maximum_length']
+                datum.width = 1
+                datum.height = 1
+                for j in range(param['maximum_length']):
+                    if j == 0:
+                        datum.float_data.append(param['start_symbol'])
+                    else:
+                        datum.float_data.append(target_line[j - 1])
+                for j in range(param['maximum_length']):
+                    datum.float_data.append(target_line[j])
+                key = str(i)
+                txn.put(key, datum.SerializeToString())
+
+def get_solver(param):
+    solver = SolverParameter()
+    solver.net = param['file_train_val_net']
+    solver.test_interval = param['solver_test_interval']
+    solver.base_lr = param['solver_base_lr']
+    solver.weight_decay = param['solver_weight_decay']
+    solver.lr_policy = param['solver_lr_policy']
+    solver.display = param['solver_display']
+    solver.max_iter = param['solver_max_iter']
+    solver.clip_gradients = param['solver_clip_gradients']
+    solver.snapshot = param['solver_snapshot']
+    solver.lr_policy = param['solver_lr_policy']
+    solver.stepsize = param['solver_stepsize']
+    solver.gamma = param['solver_gamma']
+    solver.snapshot_prefix = param['solver_snapshot_prefix']
+    solver.random_seed = param['solver_random_seed']
+    solver.solver_mode = param['solver_solver_mode']
+    solver.test_iter.append(param['solver_test_iter'])
+    return solver
+
+def add_weight_filler(param, max_value=0.07):
+    param.type = 'uniform'
+    param.min = -max_value
+    param.max = max_value
+
+def get_net(param, deploy, batch_size):
+    net = NetParameter()
+    lstm_num_cells = param['lstm_num_cells']
+    wordvec_length = param['wordvec_length']
+
+    if not deploy:
+        train_data = net.layer.add()
+        train_data.type = "Data"
+        train_data.name = "data"
+        train_data.top.append(train_data.name)
+        train_data.data_param.source = 'examples/ptb/ptb_train_db'
+        train_data.data_param.backend = DataParameter.LMDB
+        train_data.data_param.batch_size = batch_size
+
+        test_data = net.layer.add()
+        test_data.type = "Data"
+        test_data.name = "data"
+        test_data.top.append(test_data.name)
+        test_data.data_param.source = 'examples/ptb/ptb_valid_db'
+        test_data.data_param.backend = DataParameter.LMDB
+        test_data.data_param.batch_size = batch_size
+
+        test_data_rule = test_data.include.add()
+        test_data_rule.phase = caffe_pb2.TEST
+        train_data_rule = train_data.include.add()
+        train_data_rule.phase = caffe_pb2.TRAIN
+
+
+    data_slice_layer = net.layer.add()
+    data_slice_layer.name = "data_slice_layer"
+    data_slice_layer.type = "Slice"
+    data_slice_layer.slice_param.slice_dim = 1
+    data_slice_layer.bottom.append('data')
+    data_slice_layer.top.append('input_words')
+    data_slice_layer.top.append('target_words')
+    data_slice_layer.slice_param.slice_point.append(param['maximum_length'])
+
+    label_slice_layer = net.layer.add()
+    label_slice_layer.name = "label_slice_layer"
+    label_slice_layer.type = "Slice"
+    label_slice_layer.slice_param.slice_dim = 1
+    label_slice_layer.bottom.append('target_words')
+    for i in range(param['maximum_length']):
+        label_slice_layer.top.append('label%d' % i)
+        if i != 0:
+            label_slice_layer.slice_param.slice_point.append(i)
+
+    wordvec_layer = net.layer.add()
+    wordvec_layer.name = "wordvec_layer"
+    wordvec_layer.type = "Wordvec"
+    wordvec_layer.bottom.append('input_words')
+    wordvec_layer.top.append(wordvec_layer.name)
+    wordvec_layer.wordvec_param.dimension = wordvec_length
+    wordvec_layer.wordvec_param.vocab_size = param['vocab_size']
+    add_weight_filler(wordvec_layer.wordvec_param.weight_filler)
+
+    wordvec_slice_layer = net.layer.add()
+    wordvec_slice_layer.name = "wordvec_slice_layer"
+    wordvec_slice_layer.type = "Slice"
+    wordvec_slice_layer.slice_param.slice_dim = 2
+    wordvec_slice_layer.slice_param.fast_wordvec_slice = True
+    wordvec_slice_layer.bottom.append('wordvec_layer')
+    for i in range(param['maximum_length']):
+        wordvec_slice_layer.top.append('target_wordvec%d' % i)
+        if i != 0:
+            wordvec_slice_layer.slice_param.slice_point.append(i)
+
+
+    for i in range(param['maximum_length']):
+        if i == 0:
+            dummy_layer = net.layer.add()
+            dummy_layer.name = 'dummy_layer'
+            dummy_layer.top.append(dummy_layer.name)
+            dummy_layer.type = "DummyData"
+            dummy_layer.dummy_data_param.num.append(batch_size)
+            dummy_layer.dummy_data_param.channels.append(lstm_num_cells)
+            dummy_layer.dummy_data_param.height.append(1)
+            dummy_layer.dummy_data_param.width.append(1)
+
+            dummy_mem_cell = net.layer.add()
+            dummy_mem_cell.name = 'dummy_mem_cell'
+            dummy_mem_cell.top.append(dummy_mem_cell.name)
+            dummy_mem_cell.type = "DummyData"
+            dummy_mem_cell.dummy_data_param.num.append(batch_size)
+            dummy_mem_cell.dummy_data_param.channels.append(lstm_num_cells)
+            dummy_mem_cell.dummy_data_param.height.append(1)
+            dummy_mem_cell.dummy_data_param.width.append(1)
+
+
+        for j in range(param['num_lstm_stacks']):
+            concat_layer = net.layer.add()
+            concat_layer.name = 'concat%d_layer%d' % (j, i)
+
+            concat_layer.top.append(concat_layer.name)
+            concat_layer.type = "Concat"
+            concat_layer.concat_param.fast_lstm_concat = True
+            if j == 0:
+                concat_layer.bottom.append('target_wordvec%d' % i)
+            if j >= 1:
+                concat_layer.bottom.append('dropout%d_%d' % (j - 1, i))
+            if i == 0:
+                concat_layer.bottom.append(dummy_layer.name)
+            else:
+                concat_layer.bottom.append('lstm%d_hidden%d' % (j, i - 1))
+
+            lstm_layer = net.layer.add()
+            lstm_layer.name = 'lstm%d_layer%d' % (j, i)
+            lstm_layer.type = "Lstm"
+            lstm_layer.lstm_param.num_cells = lstm_num_cells
+
+            add_weight_filler(lstm_layer.lstm_param.input_weight_filler)
+            add_weight_filler(lstm_layer.lstm_param.input_gate_weight_filler)
+            add_weight_filler(lstm_layer.lstm_param.forget_gate_weight_filler)
+            add_weight_filler(lstm_layer.lstm_param.output_gate_weight_filler)
+
+            for k in range(4):
+                param_spec = lstm_layer.param.add()
+                param_spec.name = 'lstm%d_param_%d' % (j, k)
+            lstm_layer.top.append('lstm%d_hidden%d' % (j, i))
+            lstm_layer.top.append('lstm%d_mem_cell%d' % (j, i))
+            lstm_layer.bottom.append('concat%d_layer%d' % (j, i))
+            if i == 0:
+                lstm_layer.bottom.append('dummy_mem_cell')
+            else:
+                lstm_layer.bottom.append('lstm%d_mem_cell%d' % (j, i - 1))
+
+            dropout_layer = net.layer.add()
+            dropout_layer.name = 'dropout%d_%d' % (j, i)
+            dropout_layer.type = "Dropout"
+            dropout_layer.top.append(dropout_layer.name)
+            dropout_layer.bottom.append('lstm%d_hidden%d' % (j, i))
+            dropout_layer.dropout_param.dropout_ratio = param['dropout_ratio']
+
+    hidden_concat_layer = net.layer.add()
+    hidden_concat_layer.type = "Concat"
+    hidden_concat_layer.name = 'hidden_concat'
+    hidden_concat_layer.top.append(hidden_concat_layer.name)
+    hidden_concat_layer.concat_param.concat_dim = 0
+    for i in range(param['maximum_length']):
+        hidden_concat_layer.bottom.append('dropout%d_%d' % (param['num_lstm_stacks'] - 1, i))
+
+    inner_product_layer = net.layer.add()
+    inner_product_layer.name = "inner_product"
+    inner_product_layer.top.append(inner_product_layer.name)
+    inner_product_layer.bottom.append('hidden_concat')
+    inner_product_layer.type = "InnerProduct"
+    inner_product_layer.inner_product_param.bias_term = False
+    inner_product_layer.inner_product_param.num_output = param['vocab_size']
+    add_weight_filler(inner_product_layer.inner_product_param.weight_filler)
+
+    label_concat_layer = net.layer.add()
+    label_concat_layer.name = "label_concat"
+    label_concat_layer.type = "Concat"
+    label_concat_layer.concat_param.concat_dim = 0
+    label_concat_layer.top.append(label_concat_layer.name)
+    for i in range(param['maximum_length']):
+        label_concat_layer.bottom.append('label%d' % i)
+
+    if deploy:
+        word_prob_layer = net.layer.add()
+        word_prob_layer.name = "word_probs"
+        word_prob_layer.top.append(word_prob_layer.name)
+        word_prob_layer.type = "Softmax"
+        word_prob_layer.bottom.append("inner_product")
+
+    else:
+        word_loss_layer = net.layer.add()
+        word_loss_layer.name = "word_loss"
+        word_loss_layer.type = "SoftmaxWithLoss"
+        word_loss_layer.bottom.append("inner_product")
+        word_loss_layer.bottom.append("label_concat")
+        word_loss_layer.top.append(word_loss_layer.name)
+        word_loss_layer.loss_param.ignore_label = param['zero_symbol']
+
+    silence_layer = net.layer.add()
+    silence_layer.name = "silence"
+    silence_layer.type = "Silence"
+    for j in range(param['num_lstm_stacks']):
+        silence_layer.bottom.append("lstm%d_mem_cell%d" % (j, param['maximum_length'] - 1))
+    for j in range(param['num_lstm_stacks'] - 1):
+        silence_layer.bottom.append("dropout%d_%d" % (j, param['maximum_length'] - 1))
+
+    return net
+
+def write_solver(param):
+    with open(param['file_solver'], 'w') as f:
+        f.write(str(get_solver(param)))
+
+def write_net(param):
+    with open(param['file_train_val_net'], 'w') as f:
+        f.write('name: "%s"\n' % param['net_name'])
+        f.write(str(get_net(param, deploy=False, batch_size = param['train_batch_size'])))
+
+    with open(param['file_deploy_net'], 'w') as f:
+        f.write('name: "%s"\n' % param['net_name'])
+        f.write('''
+input: "data"
+input_dim: %s
+input_dim: %s
+input_dim: 1
+input_dim: 1
+
+''' % (param['deploy_batch_size'], 2 * param['maximum_length']))
+        f.write(str(get_net(param, deploy=True, batch_size = param['deploy_batch_size'])))
+
+
+def get_base_param():
+    param = {}
+    param['net_name'] = "ManningNet"
+    param['maximum_length'] = 30
+    param['vocab_size'] = 10003
+    param['num_lstm_stacks'] = 1
+
+    param['unknown_symbol'] = param['vocab_size'] - 3
+    param['start_symbol'] = param['vocab_size'] - 2
+    param['zero_symbol'] = param['vocab_size'] - 1
+
+    param['train_batch_size'] = 128
+    param['deploy_batch_size'] = 128
+    param['lstm_num_cells'] = 250
+    param['wordvec_length'] = 250
+    param['dropout_ratio'] = 0.2
+
+    param['file_solver'] = "examples/ptb/solver.prototxt"
+    param['file_train_val_net'] = "examples/ptb/train_val.prototxt"
+    param['file_deploy_net'] = "examples/ptb/deploy.prototxt"
+    param['solver_base_lr'] = 15
+    param['solver_weight_decay'] = 0.0000
+    param['solver_lr_policy'] = "fixed"
+    param['solver_display'] = 20
+    param['solver_max_iter'] = 10000
+    param['solver_clip_gradients'] = 1
+    param['solver_snapshot'] = 1000
+    param['solver_lr_policy'] = 'step'
+    param['solver_stepsize'] = 5000
+    param['solver_gamma'] = 0.8
+    param['solver_snapshot_prefix'] = "examples/ptb/ptb"
+    param['solver_random_seed'] = 17
+    param['solver_solver_mode'] = SolverParameter.GPU
+    param['solver_test_interval'] = 1000
+    param['solver_test_iter'] = 200
+    return param
+
+def prepare(param):
+    write_solver(param)
+    write_net(param)
+
+def main():
+    parser = argparse.ArgumentParser()
+    parser.add_argument('--make_data', action='store_true')
+    args = parser.parse_args()
+    if args.make_data:
+        make_data(get_base_param())
+    prepare(get_base_param())
+
+if __name__ == '__main__':
+    main()
diff --git a/examples/ptb/ptb_visualization.ipynb b/examples/ptb/ptb_visualization.ipynb
new file mode 100644
index 0000000..4da76c9
--- /dev/null
+++ b/examples/ptb/ptb_visualization.ipynb
@@ -0,0 +1,350 @@
+{
+ "metadata": {
+  "description": "Extracting features and visualizing trained filters with an example image, viewed layer-by-layer.",
+  "example_name": "Filter visualization",
+  "include_in_docs": true,
+  "priority": 2,
+  "signature": "sha256:2585f0ee5ba202a5eda0b0743bf3a8a1e02d172ce967a138b13647231abcd253"
+ },
+ "nbformat": 3,
+ "nbformat_minor": 0,
+ "worksheets": [
+  {
+   "cells": [
+    {
+     "cell_type": "markdown",
+     "metadata": {},
+     "source": [
+      "Running this notebook requires the user to have installed tsne and mpld3 with:\n",
+      "    \n",
+      "    pip install mpld3\n",
+      "    pip install tsne\n",
+      "    \n",
+      "Preloaded results can be viewed by scrolling down."
+     ]
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "from __future__ import division\n",
+      "import numpy as np\n",
+      "import pickle\n",
+      "from tsne import bh_sne\n",
+      "%matplotlib inline\n",
+      "import matplotlib.pyplot as plt\n",
+      "import math\n",
+      "import lmdb\n",
+      "import itertools\n",
+      "\n",
+      "import mpld3\n",
+      "mpld3.enable_notebook()\n",
+      "from mpld3 import plugins\n",
+      "\n",
+      "# Make sure that caffe is on the python path:\n",
+      "caffe_root = '../../'  # this file is expected to be in {caffe_root}/examples/ptb\n",
+      "import sys\n",
+      "sys.path.insert(0, caffe_root + 'python')\n",
+      "import caffe\n",
+      "sys.path.insert(0, caffe_root + 'python/caffe/proto')\n",
+      "import caffe_pb2\n",
+      "sys.path.insert(0, caffe_root + 'examples/ptb')\n",
+      "import create_ptb"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 1
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "base_param = create_ptb.get_base_param()\n",
+      "caffe.set_mode_gpu()\n",
+      "net = caffe.Classifier(caffe_root + 'examples/ptb/deploy.prototxt',\n",
+      "                       caffe_root + 'examples/ptb/ptb_iter_10000.caffemodel')"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 2
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "def get_datums():\n",
+      "    env = lmdb.open(caffe_root + 'examples/ptb/ptb_test_db')\n",
+      "    with env.begin() as txn:\n",
+      "        cursor = txn.cursor()\n",
+      "        while cursor.next():\n",
+      "            datum = caffe_pb2.Datum()\n",
+      "            datum.ParseFromString(cursor.value())\n",
+      "            yield datum"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 3
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "fast_test = False\n",
+      "if fast_test:   \n",
+      "    datums = list(itertools.islice(get_datums(), 1000))\n",
+      "else:\n",
+      "    datums = list(get_datums())"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 4
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "def get_data(datums):\n",
+      "    n = datums[0].channels // 2\n",
+      "    for i in range(0, len(datums), base_param['deploy_batch_size']):\n",
+      "        data = np.zeros((base_param['deploy_batch_size'], 2 * n, 1, 1))\n",
+      "        for j in range(base_param['deploy_batch_size']):\n",
+      "            if (i + j) >= len(datums):\n",
+      "                return\n",
+      "            data[j, :, 0, 0] = datums[i + j].float_data\n",
+      "        yield data\n",
+      "\n",
+      "data_batches = list(get_data(datums))"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 5
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "def score_sentence(datum, net, net_id):\n",
+      "    n = datum.channels // 2\n",
+      "    loss = np.zeros(n,)\n",
+      "    length = 0\n",
+      "    for i in range(n):\n",
+      "        target_category_id = int(net.blobs['target_words'].data[net_id, i].flatten()[0])\n",
+      "        if target_category_id == base_param['zero_symbol']:\n",
+      "            break\n",
+      "        length += 1\n",
+      "        loss[i] = -math.log(net.blobs['word_probs'].data[net_id + base_param['deploy_batch_size'] * i, target_category_id])\n",
+      "\n",
+      "    return loss, length"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 6
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "losses = []\n",
+      "lengths = []\n",
+      "for i, batch in enumerate(data_batches):\n",
+      "    net.rff(batch)\n",
+      "    for j in range(len(batch)):\n",
+      "        datum = datums[j + base_param['deploy_batch_size'] * i] \n",
+      "        loss, length = score_sentence(datum, net, j)\n",
+      "        losses.append(loss)        \n",
+      "        lengths.append(length)\n",
+      "    if i % 5 == 0: print 'current loss: %s' % (np.sum(losses) / sum(lengths))\n",
+      "print 'Final perplexity %s' % math.exp(np.sum(losses) / sum(lengths))"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "current loss: 5.11212046274\n",
+        "current loss: 5.08312111885"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n",
+        "current loss: 4.92693078324"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n",
+        "current loss: 4.95470371591"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n",
+        "current loss: 4.96883174392"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n",
+        "current loss: 4.97399864866"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n",
+        "Final perplexity 141.192281652"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n"
+       ]
+      }
+     ],
+     "prompt_number": 7
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "vocab = pickle.load(open(caffe_root + 'data/ptb/vocab.pkl', 'r'))\n",
+      "inv = lambda d: {v:k for k,v in d.iteritems()}\n",
+      "vocab_inv = inv(vocab)"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 8
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "word_vectors = {k:net.params['wordvec_layer'][0].data[0, vocab[k], 0, :] for (k, v) in vocab.items() if v < base_param['vocab_size']}\n",
+      "print sorted(word_vectors.keys(), key= lambda x: np.linalg.norm(word_vectors['four'] - word_vectors[x]))[:20]"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "['four', 'seven', 'three', 'ten', 'five', 'six', 'eight', 'rice', 'olympic', 'one-day', 'two', 'several', 'sharpest', 'hectic', 'hundred', 'eighth', 'twelve', 'ninth', 'nine', 'few']\n"
+       ]
+      }
+     ],
+     "prompt_number": 9
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "M = np.zeros((len(word_vectors), len(word_vectors.values()[0].flatten())))\n",
+      "for k, v in word_vectors.items():\n",
+      "    M[vocab[k], :] = v\n",
+      "\n",
+      "X_2d = bh_sne(M)"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 10
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'), figsize=(8,8))\n",
+      "ax.grid(color='white', linestyle='solid')\n",
+      "\n",
+      "num_words_to_plot = 500\n",
+      "\n",
+      "scatter = ax.scatter(X_2d[:num_words_to_plot, 0], X_2d[:num_words_to_plot, 1], s = 100, c='#3EEEEE', alpha=0.1, cmap=plt.cm.jet)\n",
+      "labels = [vocab_inv[i] for i in range(num_words_to_plot)]\n",
+      "plugins.connect(fig, plugins.PointLabelTooltip(scatter, labels))"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [
+      {
+       "html": [
+        "\n",
+        "\n",
+        "<style>\n",
+        "\n",
+        "</style>\n",
+        "\n",
+        "<div id=\"fig_el162481405257893668009323695359\"></div>\n",
+        "<script>\n",
+        "function mpld3_load_lib(url, callback){\n",
+        "  var s = document.createElement('script');\n",
+        "  s.src = url;\n",
+        "  s.async = true;\n",
+        "  s.onreadystatechange = s.onload = callback;\n",
+        "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
+        "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
+        "}\n",
+        "\n",
+        "if(typeof(mpld3) !== \"undefined\" && mpld3._mpld3IsLoaded){\n",
+        "   // already loaded: just create the figure\n",
+        "   !function(mpld3){\n",
+        "       \n",
+        "       mpld3.draw_figure(\"fig_el162481405257893668009323695359\", {\"axes\": [{\"xlim\": [-15.0, 20.0], \"yscale\": \"linear\", \"axesbg\": \"#EEEEEE\", \"texts\": [], \"zoomable\": true, \"images\": [], \"xdomain\": [-15.0, 20.0], \"ylim\": [-20.0, 15.0], \"paths\": [], \"sharey\": [], \"sharex\": [], \"axesbgalpha\": null, \"axes\": [{\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"bottom\", \"nticks\": 8, \"tickvalues\": null}, {\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"left\", \"nticks\": 8, \"tickvalues\": null}], \"lines\": [], \"markers\": [], \"id\": \"el16248140525596270160\", \"ydomain\": [-20.0, 15.0], \"collections\": [{\"paths\": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], [\"M\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"Z\"]]], \"edgecolors\": [\"#000000\"], \"edgewidths\": [1.0], \"offsets\": \"data01\", \"yindex\": 1, \"id\": \"el16248140525596421968\", \"pathtransforms\": [[11.11111111111111, 0.0, 0.0, 11.11111111111111, 0.0, 0.0]], \"pathcoordinates\": \"display\", \"offsetcoordinates\": \"data\", \"zorder\": 1, \"xindex\": 0, \"alphas\": [0.1], \"facecolors\": [\"#3EEEEE\"]}], \"xscale\": \"linear\", \"bbox\": [0.125, 0.125, 0.77500000000000002, 0.77500000000000002]}], \"height\": 640.0, \"width\": 640.0, \"plugins\": [{\"type\": \"reset\"}, {\"enabled\": false, \"button\": true, \"type\": \"zoom\"}, {\"enabled\": false, \"button\": true, \"type\": \"boxzoom\"}, {\"voffset\": 10, \"labels\": [\"the\", \"<unk>\", \"N\", \"of\", \"to\", \"a\", \"in\", \"and\", \"'s\", \"that\", \"for\", \"$\", \"is\", \"it\", \"said\", \"on\", \"by\", \"at\", \"as\", \"from\", \"million\", \"with\", \"mr.\", \"was\", \"be\", \"are\", \"its\", \"he\", \"but\", \"has\", \"an\", \"n't\", \"will\", \"have\", \"new\", \"or\", \"company\", \"they\", \"this\", \"year\", \"which\", \"would\", \"about\", \"says\", \"more\", \"were\", \"market\", \"billion\", \"his\", \"had\", \"their\", \"up\", \"u.s.\", \"one\", \"than\", \"who\", \"some\", \"been\", \"also\", \"stock\", \"other\", \"share\", \"not\", \"we\", \"corp.\", \"if\", \"when\", \"i\", \"last\", \"shares\", \"president\", \"years\", \"all\", \"first\", \"two\", \"trading\", \"because\", \"after\", \"could\", \"inc.\", \"sales\", \"&\", \"there\", \"out\", \"business\", \"only\", \"do\", \"such\", \"can\", \"most\", \"into\", \"york\", \"may\", \"over\", \"co.\", \"group\", \"many\", \"government\", \"now\", \"federal\", \"companies\", \"no\", \"time\", \"bank\", \"so\", \"any\", \"cents\", \"people\", \"quarter\", \"you\", \"exchange\", \"prices\", \"even\", \"what\", \"price\", \"investors\", \"say\", \"down\", \"rose\", \"while\", \"much\", \"yesterday\", \"week\", \"under\", \"securities\", \"months\", \"them\", \"bonds\", \"big\", \"next\", \"interest\", \"three\", \"earlier\", \"'\", \"net\", \"earnings\", \"major\", \"make\", \"state\", \"american\", \"financial\", \"chairman\", \"did\", \"these\", \"investment\", \"board\", \"still\", \"through\", \"stocks\", \"those\", \"just\", \"chief\", \"industry\", \"executive\", \"since\", \"program\", \"before\", \"rate\", \"made\", \"officials\", \"money\", \"national\", \"she\", \"house\", \"analysts\", \"like\", \"unit\", \"month\", \"off\", \"expected\", \"days\", \"rates\", \"japanese\", \"against\", \"plan\", \"does\", \"profit\", \"between\", \"both\", \"capital\", \"recent\", \"sell\", \"buy\", \"income\", \"issue\", \"revenue\", \"get\", \"general\", \"products\", \"markets\", \"firm\", \"back\", \"funds\", \"own\", \"ago\", \"average\", \"international\", \"during\", \"her\", \"well\", \"part\", \"japan\", \"fell\", \"should\", \"another\", \"higher\", \"debt\", \"offer\", \"take\", \"including\", \"among\", \"court\", \"being\", \"according\", \"each\", \"index\", \"tax\", \"world\", \"trade\", \"reported\", \"work\", \"operations\", \"then\", \"past\", \"computer\", \"sale\", \"way\", \"however\", \"our\", \"lower\", \"plans\", \"vice\", \"economic\", \"department\", \"yield\", \"end\", \"report\", \"sold\", \"insurance\", \"high\", \"growth\", \"how\", \"increase\", \"foreign\", \"less\", \"common\", \"banks\", \"several\", \"closed\", \"issues\", \"where\", \"very\", \"loss\", \"yen\", \"pay\", \"bush\", \"bid\", \"five\", \"due\", \"bill\", \"few\", \"used\", \"good\", \"current\", \"management\", \"early\", \"cash\", \"oil\", \"use\", \"costs\", \"bond\", \"day\", \"system\", \"public\", \"director\", \"third\", \"'re\", \"law\", \"might\", \"traders\", \"treasury\", \"friday\", \"office\", \"added\", \"city\", \"congress\", \"futures\", \"concern\", \"officer\", \"far\", \"late\", \"fund\", \"already\", \"number\", \"california\", \"assets\", \"least\", \"operating\", \"small\", \"spokesman\", \"him\", \"agency\", \"british\", \"san\", \"based\", \"too\", \"case\", \"real\", \"value\", \"news\", \"september\", \"same\", \"oct.\", \"until\", \"think\", \"contract\", \"research\", \"union\", \"stake\", \"close\", \"home\", \"street\", \"services\", \"going\", \"today\", \"little\", \"ended\", \"though\", \"move\", \"wall\", \"agreement\", \"dollar\", \"help\", \"second\", \"put\", \"service\", \"former\", \"power\", \"maker\", \"period\", \"called\", \"results\", \"total\", \"administration\", \"agreed\", \"four\", \"here\", \"third-quarter\", \"without\", \"control\", \"long\", \"corporate\", \"economy\", \"credit\", \"problems\", \"offering\", \"want\", \"country\", \"production\", \"buying\", \"loans\", \"cost\", \"six\", \"analyst\", \"firms\", \"annual\", \"although\", \"increased\", \"whether\", \"compared\", \"likely\", \"committee\", \"policy\", \"point\", \"recently\", \"notes\", \"cut\", \"see\", \"west\", \"large\", \"right\", \"monday\", \"soviet\", \"around\", \"set\", \"go\", \"continue\", \"half\", \"political\", \"life\", \"losses\", \"further\", \"old\", \"points\", \"volume\", \"yet\", \"august\", \"paper\", \"selling\", \"john\", \"plant\", \"judge\", \"strong\", \"must\", \"my\", \"expects\", \"nov.\", \"ual\", \"london\", \"result\", \"announced\", \"declined\", \"largest\", \"support\", \"fiscal\", \"held\", \"wo\", \"systems\", \"francisco\", \"times\", \"weeks\", \"takeover\", \"making\", \"priced\", \"certain\", \"earthquake\", \"become\", \"change\", \"gain\", \"composite\", \"workers\", \"problem\", \"businesses\", \"come\", \"south\", \"demand\", \"give\", \"industrial\", \"record\", \"nearly\", \"series\", \"inc\", \"development\", \"white\", \"senior\", \"association\", \"dow\", \"area\", \"members\", \"data\", \"air\", \"estimated\", \"took\", \"official\", \"orders\", \"employees\", \"trust\", \"jones\", \"estate\", \"decline\", \"level\", \"senate\", \"line\", \"show\", \"latest\", \"later\", \"health\", \"example\", \"acquisition\", \"drop\", \"comment\", \"junk\", \"tuesday\", \"commission\", \"meeting\", \"holding\", \"commercial\", \"need\", \"ford\", \"know\", \"building\", \"your\", \"texas\", \"chicago\", \"despite\", \"ms.\", \"currently\", \"addition\", \"paid\", \"proposal\", \"possible\", \"executives\", \"offered\", \"others\", \"purchase\", \"deal\", \"rise\", \"proposed\", \"once\", \"loan\"], \"hoffset\": 0, \"location\": \"mouse\", \"type\": \"tooltip\", \"id\": \"el16248140525596421968\"}], \"data\": {\"data01\": [[11.071193293788813, 1.5426625468387454], [-1.1194151362641411, -4.418706634375533], [-5.165894505703799, 7.608393905789143], [5.069451422876669, -6.660822460279021], [7.469071974980342, -10.983766152119237], [11.030036850725503, 1.2989793753772856], [4.906552563422692, -6.068305260649689], [1.3667324616352865, -11.481533660068058], [7.324557797051708, 6.852584913226878], [-3.438019051433326, -12.290415751008762], [5.4586967507185, -6.597647178465341], [7.558492279713394, -12.589421109394285], [14.466785244642109, -1.548038672985574], [-8.15970843948952, -10.199875127735085], [-1.6908310677014686, -11.852345452702428], [5.111923341217739, -6.6342331545127955], [5.3115106069848705, -6.747278747977412], [5.827904851435067, -6.991045056956195], [5.722882884765794, -7.684200381474289], [5.627234643109184, -7.148595579772625], [-8.283305743348016, -4.79722790503902], [5.484729335158506, -7.082702802674851], [11.59417952030527, -4.024637510671848], [14.51629783442133, -1.4111983019483083], [14.022146386095692, -0.6219370492998908], [14.43222380167582, -1.5346340212250635], [11.00749732049248, 1.6391665510847495], [-10.217684602978833, -9.035887646737166], [-3.454786087204529, -12.250474328629112], [9.096888256709667, -8.722497450379931], [12.044409292182719, -3.1986187811411315], [9.429807870971683, -8.49743611491662], [-2.2288753618973507, -15.253613318899909], [9.092538108069261, -8.71806526584601], [12.70141662114709, 2.9528308793458025], [6.912326168974564, -7.070321010292854], [-4.674449140747841, -3.9580106268256334], [-10.405705865187468, 6.457186792920277], [8.100888170736711, 6.277203935057833], [-2.3832792087817425, 3.955289638302907], [-3.5961382978866525, -12.26002968369479], [-2.2050273729703687, -15.235674238198325], [6.942748677938527, -6.632751209328568], [-1.705533792903998, -11.897456613086906], [12.23073824636912, 2.1295182457210227], [14.426227169883608, -1.4003566381336006], [5.031106785602546, 10.10801662546567], [3.274449505103534, 8.573110104251828], [11.29358388420506, 1.3693549112325571], [9.050376717517727, -8.72135324419009], [10.680710367518737, 1.6382669501827354], [5.495036475993081, -12.956385119722693], [1.1396387204070828, -13.726466094951538], [13.82469165532339, 4.752381817240819], [5.8192393316725095, -6.480494846617212], [-8.066152903681436, -10.450052845318398], [-9.788859562141115, -2.453292697772645], [14.162319035742925, -0.6876624736812756], [-0.47474697995510096, 11.997520962292374], [0.8731166160580155, 7.842901765685997], [7.709884241510655, 2.9618307699798923], [-8.500387753469303, -1.6769763719210278], [8.65525196309655, -8.196053633080503], [-9.98303535021694, 5.602886018695526], [-7.662960317114181, -4.124326657989969], [-3.0687015830196467, -12.19221909118473], [-3.1156114098995955, -12.222434222151247], [-3.124173720168715, -14.533739736965828], [7.734767747359909, 6.285636740207656], [-7.138227442009886, 6.270227692453355], [-5.395225379876008, -11.024790762478048], [-3.633809956835943, 5.5083734481093645], [-11.073395462313103, -1.1663242579742454], [7.074624902074825, 8.819350729932387], [13.934617598466307, 4.761856297182513], [0.27925386685813813, 7.993653585823863], [-3.1543634452835145, -12.215042543049824], [5.753798280566251, -6.692801942998173], [-2.1483754722687642, -15.188744689848878], [-7.666876197289415, -4.130861375527113], [-5.03407287976596, 8.110273353393712], [-4.9570462774054205, -8.618406168456824], [-6.93930123769212, 4.358533594809605], [-9.918827395938834, -0.6389512637519424], [-2.0949681841472474, 0.718930222405829], [-0.4220704011980053, 11.106842947733336], [-1.4183030369607281, -14.584840474223324], [0.2630465476544743, -8.1528004590429], [-2.2195997562422534, -15.239428281534117], [13.506747022321711, -1.3347292903400194], [4.96116256193548, -6.81035797474379], [-8.200995728026193, -8.551026914434017], [-2.2342256299487917, -15.245490153090019], [5.497429760734615, -6.019400244413265], [-7.661365338234572, -4.149570314562168], [-5.215772126582202, -6.354278576789704], [7.100994626719128, 0.8897576487119475], [-3.4586479987922947, -3.603568547970911], [-0.18834392835946986, 11.855144750148193], [8.70317579430114, 3.2492513302445927], [-7.867477922029315, 6.466590357708744], [9.87937139138166, 2.1161022704841663], [1.6427208082979454, 13.386936272412763], [-7.443289482083182, -7.280142656501182], [13.055310346573064, -1.3989143309745569], [6.326410514134346, 2.440479517231073], [1.5626223253167293, -11.032510498933416], [-9.39064405326907, 5.482493285266896], [-6.774204380217179, 1.8627575852415266], [-9.859879926107059, 5.458951140050983], [-3.815141148531592, -3.8026323334455663], [-5.702915524094395, 7.342889222499131], [0.5686877866453386, 11.969518879446909], [-3.471893267014123, -12.279600952507007], [-7.220908002137964, -7.194638204263702], [-8.172177252119376, 6.123378226583951], [-2.0687849990418723, -11.718680965456715], [5.516383627337457, -12.897162606400554], [5.974251120254436, -12.540688072159409], [-3.252182398438716, -12.2851238732187], [-1.504345090454669, 4.6383067552446535], [-11.34023393976883, -7.42288946271433], [-3.873038575581622, -1.5006721457267074], [5.183907218858897, -6.982776838426966], [-3.2865577339589596, -8.573883799003385], [-6.433596852119819, 1.7463316803544162], [-11.170607119679428, 7.092295186300019], [-5.985798345167941, 6.3815329811004355], [5.982317082002857, -1.5131621624991967], [7.590385505910043, 6.166716623841581], [5.995665286948711, 8.340637032200076], [13.918215988496465, 4.761157823581358], [2.6306566026431843, 9.20992893882945], [10.412919855644708, 1.6012467475221845], [8.309478639588024, 7.600899352428367], [-4.848396530497164, 8.129130968948996], [6.560923034657423, -1.1729890294512941], [4.371120125304053, -9.088463356147995], [3.126466714489998, 3.772927864311192], [7.167015409502914, -1.5557507763571847], [8.713763533654609, 4.475071445580907], [-5.28935100027962, -11.040837040216381], [-1.42647967700982, -14.585057318910815], [7.92333344018428, 3.48456646834172], [-1.4355467747054738, 7.208019488182383], [-4.4099377568880485, -3.418614509424135], [-0.12294372257754292, 11.901211291450005], [4.916567882218723, -6.508776536223346], [-6.852065598617995, 6.656012476025483], [9.38836987708756, 4.9158483554666494], [-0.5424720070298312, 10.897875702686672], [-9.189969484408513, -7.120779216244257], [-3.9149285068337654, -2.4650886591568177], [9.926550203578799, -6.229340692040948], [8.171688897311107, -10.80609539496742], [5.557756214579422, 9.266558424505439], [0.7896926425859543, -10.704752974726789], [-1.5540202558278846, 9.231867824430806], [4.128072172683088, -8.742842666611109], [-11.422154104276254, 5.023239471860592], [0.48836788418584964, 7.850251038517146], [8.989600457700785, 3.5910749612371258], [-10.215111068075041, -9.037536262859362], [-5.865860319612476, -2.979357215972594], [-11.265370788373712, 5.966137902685077], [3.522414125970239, -13.018367395797936], [-8.920820995665071, -3.6054850450362017], [-2.3973598245755197, 7.311805954904842], [-1.653710816942467, 11.091341050733918], [0.2905771767741918, -13.270103421590235], [-3.8516729480872653, 5.579522064284861], [-5.684651384450539, 6.955518569582586], [6.720985169803443, 0.6214337673267755], [5.301466326183714, -6.446821708829237], [-13.322214787292358, -3.70731749839284], [-1.4390702062269853, -14.592027532452658], [-4.702073458932197, 8.160428409482265], [6.3116680259348215, -6.288847372212669], [12.424350789357742, 3.6656465699943976], [6.863039188725628, 8.491744272215962], [7.242721225728653, 5.258067083793459], [5.17615160534442, 9.993000531723565], [6.514836970300554, -9.637521519101217], [-4.423343800533534, 8.318832729449518], [-6.911110537687643, 0.8938437949192872], [-4.932532850568996, 8.10823873623249], [4.74109239981676, -9.078844325410543], [9.122591662406462, -1.0287287601476056], [-8.225813564418706, 6.539931013439156], [-5.7480541428837935, 4.267921238132986], [-4.534712118355969, -2.6152257803510013], [-1.7415721981405388, 10.436453059286642], [-6.023418614719078, 6.784609109498126], [3.779607363293929, -2.6450118771575752], [-1.6137805676422352, 11.30797060134802], [-12.421848410031822, 1.543947011478871], [12.113667541986471, 6.2184296099758045], [5.0842588219345695, -6.148468238923174], [9.792052648742894, 0.11101492037727866], [-1.4797583045738891, 4.445237372953385], [-9.415152038410563, -0.5396492814875418], [-5.520198244933204, -3.630284481341042], [5.956281806618545, -12.529746211053173], [-2.1989999008132486, -15.218288298954185], [6.1905421008903385, 2.6711597090839225], [15.223160069094618, -5.512090217698532], [-1.9846840104982877, 8.375502659253508], [-4.9540294297864556, -0.8526600078122378], [5.1568580039631255, -10.134271173219712], [5.142982965708817, -6.886218021482505], [5.6439408956578125, -6.400591615937892], [-4.374740109927609, -1.9257292676638085], [13.888314634799396, -0.5924582526708945], [-12.907420732528545, -2.506967847176809], [-8.994190406272345, -6.033114512398679], [-8.962555719679775, -9.118610334815829], [8.568954947841283, 6.66177841627263], [-4.842579351615124, -10.16554933519015], [2.785854607407318, 5.015766534313583], [0.9693944217698962, -12.226482998254268], [-6.547906720059921, 10.67085517847542], [-10.528582717267874, 2.9852091263779816], [-0.07988832792938069, 11.673115042026662], [6.856060746036312, 6.405335963686177], [-8.460021555555807, 10.853483849963066], [-7.928750011965152, 0.6910152370449048], [-2.5291793815865335, 1.6247693288340355], [-1.3577358436824551, 11.706700032362283], [10.780222246634885, 1.6357469761674857], [15.220324863902954, -5.515869273396297], [-12.410445416632152, -3.778735130263766], [9.250311621405297, -6.654855729596579], [8.41667490442455, 1.9320045880051457], [-8.193555088132433, -2.69016663769927], [-3.2222864665129767, 10.78517310595299], [-8.750285996377679, -0.3577252312966788], [-4.185165727648709, 4.260068702919416], [5.88366703763561, -9.290468325581381], [4.316841419619275, 7.146856717810065], [4.855543382732219, 6.448839330060639], [-0.5940666666378962, 7.760315954900982], [-8.15525324015067, -10.433761575471548], [0.17170641120436345, 8.883792014067684], [6.814958764784381, 3.489158334758788], [12.152855539736425, 2.1335232733668965], [-9.776409944531238, -6.155282806741743], [-8.05374599437549, 6.28892995842513], [13.66008332736535, 4.631423103873609], [1.2430998929487826, -9.574141391845089], [-6.13106853782891, 7.1956348286482426], [-3.2595330058344656, -12.248726157706724], [13.22731728990445, -1.768914238544623], [-9.128486340782025, 1.560454254045868], [-9.192331437309722, 1.8144578146909518], [2.2718528932434356, 8.028320603550126], [2.888002436682519, 10.19743549587964], [-6.013312498753442, -0.1645164240418375], [13.915696166345226, 4.765772152696068], [1.9369320357747557, -9.29486596096833], [-2.438636626325507, -1.1462546317084852], [13.758091859573868, 4.649147698637093], [1.8486019296175709, -8.211185676435624], [7.732556244209111, 2.117796275064272], [5.783238641602565, 5.466663490468544], [-4.925502564890372, -4.321055155657129], [4.122445309457146, 9.70693764325037], [8.752129143874246, 6.358489449828919], [8.140722784828023, 9.22389325517649], [4.070928460282057, -8.939007937520358], [-11.731135386186741, 2.6211676312154712], [-8.337761950390387, -8.195767800900171], [-3.9503500483470684, -1.5756172652948726], [-2.00587049077801, 0.15680313566918272], [5.314451746839049, 1.579513740147483], [-5.425646207697813, -11.034166639346383], [10.033933440811088, 5.628058917310408], [14.307059473691913, -1.5017657000061733], [-3.12958041332649, -1.977525791066316], [-2.2098420421023337, -15.22147575101788], [-11.536756584351629, 5.878516124862865], [-7.493620268162755, -8.909906824000768], [-11.328973977783424, -7.414139397053552], [-4.617501685092901, -1.319233003671606], [-1.7384595987997962, -9.616285422260573], [-6.244328684632257, -4.739257971669029], [-5.487751113849952, -2.388900688147781], [1.0933872120298311, 7.859456549451518], [-7.58952329668113, -4.915852210218887], [-8.508848555011323, -3.042331861454137], [3.3634665492073483, 10.723428227480838], [4.779628336539369, 10.6174856479974], [-3.5978462826516484, -3.332611597753655], [0.12873743265538048, 12.211359636340484], [-10.664083682166192, 0.3555506211157833], [-4.266464485165099, -2.7841236093141273], [-6.204479304153358, 7.194874307621534], [3.180792468730995, 5.736460385222325], [8.18348576123777, 7.786154096380171], [6.4619780743553825, 3.143078892104144], [-6.914039992465257, -10.603207455471539], [-5.280843340993378, 3.4293881870711447], [-5.409721113120703, -3.1328305682420674], [6.853540692985112, 0.7130086772043848], [12.173207076922573, -3.739667470946415], [-10.738374282865731, 9.109315584801019], [13.316863946346402, -1.7398730919388314], [-7.231442612826701, 4.08818302056863], [9.505251142978956, 2.705074291672686], [-12.26048631629087, 1.5527450929242785], [-3.5192424309702224, 9.75573507402325], [-1.885738742457241, 8.125770139017462], [6.984896482876344, 5.412108740554408], [7.535568658963388, -12.40106211894096], [8.153292244391048, -10.802179757035569], [-1.9533301050969056, -11.202001938255314], [-7.186236374685793, 11.482378111152027], [1.2787995498523619, 5.072599271479204], [-3.2255877530815487, -2.994602062728024], [-3.0833948007261105, 5.549897311246674], [-1.5199993850952649, -2.893667464675612], [2.939252232906412, 6.392893710295347], [1.015389185171945, 4.974996789191783], [-12.125639722246678, 1.1723951632403784], [3.8828819442147635, -11.955969451879733], [-11.293337102686232, -7.357801212011153], [1.4775349788987966, 7.032131322305244], [4.751549817771654, 10.62288769017103], [-3.29066905181777, -12.225520441228046], [-3.2695562118309636, 6.385305095855594], [-9.267437625569649, -7.336573897531918], [-7.146785329637891, 11.344795636352979], [1.246224264578295, 9.355398898280214], [-13.328813755050609, -3.0779007150102338], [9.803243436922005, 5.595332815873618], [4.339840962023357, -9.022701636760189], [-4.392568278563389, -5.922791012362278], [9.875790990377823, -5.056454002473141], [-2.889026051999338, 12.176199568284838], [-9.159907948763678, -2.3353186704128905], [-6.636898513443478, 1.8285734266563165], [3.8420880352834184, -6.869588472956859], [-5.711318809714862, 7.095052298588258], [5.386330520738454, 7.089430838724529], [-3.3775901026306907, -2.7403099961005637], [-12.336166573228578, -4.54254358657389], [13.916354607535817, 4.7638782001923765], [-5.867974564100238, 3.7936526339845713], [7.827770208495308, 7.808766977493467], [6.551042708815454, -7.352833383016251], [-8.282244449342544, -1.5488653013340703], [1.3513132838579556, 6.542686628727576], [5.012341267726815, 3.335400784197255], [1.5585631478925852, 9.054178760914844], [3.3381063680853664, 7.533584533891047], [-7.388064494218034, 7.661735655133439], [-8.966715125646207, 1.403851194156259], [-12.260335075393314, -4.170685018978582], [-4.4577362221383385, -2.505381395280374], [-1.034455104140975, 8.112665233227126], [4.173339034444273, 6.716141417324061], [-7.645229220244572, 6.467504475214934], [-12.247960481330201, 2.1330821025111324], [13.915335286386915, 4.770276459637884], [-6.111801311913414, -10.700936952912222], [-8.051166620428798, 6.356083981982525], [7.508736186380432, 7.904543517429075], [-3.194643995796129, -12.231954227668274], [5.25019710792089, 7.24835951666805], [-3.3342809843647885, -12.25239918052111], [-8.36648332317541, 10.133211039923825], [-11.981557479784058, -4.07449085156721], [-4.329923967721768, -1.7182837427681041], [0.9734182034733058, 3.252258019237875], [-13.019300145453762, 2.017057716103325], [0.19229827864573162, 12.148753799273164], [-5.846555082638568, 6.234820281290875], [0.1733630181248346, 8.772346084881407], [1.1859614172611512, -8.018920247392897], [13.957859423686344, -2.7544683348971355], [5.834363749709343, 3.3940943783038184], [0.49362555870989433, 9.765808438033352], [-11.314857834085222, -7.405339471638212], [7.307611712664904, 0.9155536370259291], [4.335325772416614, -6.0651351945641085], [4.1966797075833675, -10.054707177470178], [-0.958282586271381, 6.49707163455318], [-12.075875170031143, -3.5757229478682535], [-9.986491096598163, -2.4284884552210046], [8.485842986372607, 1.3808982448934493], [4.468974841029809, 8.955904587762546], [-5.179946598609937, 9.296980801752733], [4.896838518990785, 8.153772975791682], [5.502640666457967, -0.7994612957562626], [-3.876570276079939, 6.222876996422032], [-1.6334435271775738, 6.3187085975765305], [-0.43592792752964465, 11.697427774286153], [-2.1922065430183073, 8.10489117212735], [-3.8618288997971484, -7.72419293170287], [6.90150074443438, 5.431433306209803], [10.625098668003286, -4.422774512548975], [-2.534673429825065, 0.6485925802817538], [-5.0146168407355685, -10.877313865210741], [5.842880437272215, 4.80205816785489], [-2.1901877921671096, -15.218203611069248], [11.230361959967299, 1.2355681662314453], [5.281053464855597, -8.898533565177326], [7.521769510838662, -12.39411953692738], [-7.082254709188155, -5.670363639615193], [3.147652303275819, 12.84072105143929], [-7.028000035111452, 0.7711688268755114], [5.9304369718439975, -8.110323952899442], [-12.619930079358841, -4.113399059581858], [6.01172231781453, 2.5180211512337274], [-7.614808269852853, 0.32008231915535257], [7.620706192112162, -12.405862567992013], [0.7553017472323248, -8.563183899546551], [-1.6976122833220084, -14.885670969742044], [-3.74864584316625, -6.740936462808057], [5.78960824502848, -1.793052217537389], [-5.112405227523367, 4.162662000525701], [-3.773006818070283, 5.32285748896222], [-4.251449796200577, -9.124881991257352], [4.32209257344125, -8.896550523605562], [-13.327235958770808, 0.9459750191234055], [9.316545058486055, 3.9997292208267767], [4.437119001195094, 10.101759216927467], [5.920455103248595, -7.791101988031239], [-3.289614768820118, 6.6982113214621055], [-1.4301438078859507, 8.926709483678636], [-9.034222964945798, -9.31331473475792], [-9.260428516210261, 5.109812546242018], [-9.994119411727652, 7.87334041746346], [-7.787065919262201, 6.254317488906279], [-9.315553338236843, 8.459630607805734], [7.0161816281315526, -2.102934284199215], [-4.275406889122285, 7.243245016304494], [7.054480110799861, -8.827021816268623], [7.843132295101665, 0.4750934719560204], [3.0731082423081446, 7.675049616546453], [7.23216234058352, -6.5793852665691155], [-10.859084776247803, -0.10504057133953593], [-13.193539861753662, 5.4454215137159805], [-11.465233629789536, 0.574324559596368], [6.061410574409012, -2.715546072241345], [6.817276129047788, -0.470352801469562], [-4.475492651176828, -1.1166918506749053], [-4.601512216847428, -7.533236668802977], [-7.1152264268237815, 1.1997122050520437], [-10.231290541538304, 3.640699232212779], [-12.057631903514501, 1.1743812295038294], [10.4575973416176, 3.368967411566342], [0.2820638447180123, -13.217236009096464], [5.225019532839203, -9.662167261773728], [-8.190508434699867, -3.342078489563604], [-5.2481904937626105, 6.616082988949221], [-8.458726630052112, 5.359641368374514], [-6.680885132975456, -6.676421580518651], [6.302399511917023, 1.195961090130331], [-9.451271145332587, -5.254862099080876], [-2.8876617468255232, 7.7360419701577365], [-7.4319972928250415, 1.6728296613418272], [8.55558839277116, 3.5642025977140346], [-8.949294444239609, -3.909696890593712], [-0.12821701586919312, -9.285609834976647], [7.361684048483804, 6.123748735780253], [-1.2795701676186437, 11.600643941868572], [2.4543973150871765, 5.76509592342997], [-3.8113659367114026, 1.1425442105338328], [-8.566923428956176, -4.239410702579881], [-2.9819439776833985, 6.958446682552351], [-4.9662854545125725, 2.7902344006802173], [6.469062616351551, 7.756190071538844], [-11.325554602695412, -7.408974556162495], [-4.117928133911796, -1.4580976909540944], [-3.4353567286762057, 0.23361523633895015], [-2.747075052645658, -8.180404628861531], [6.542621366255626, -1.315787994436245], [7.208379848518947, -7.193072129333574], [-6.698909119650492, -4.919420812363325], [-1.1115590069682648, -9.192696632654567], [-0.979389461159814, -3.385653544350394], [10.781364912779447, 1.400555606226705], [-3.643438930842627, -7.614768531144896], [-3.3922086085591947, -5.363131899594515], [5.347659078074252, -7.241049741359242], [11.359075997328882, -3.881737845643038], [-0.7196508021082505, 12.063795149716126], [-2.8220935604163153, -11.19697636269803], [2.6401010124045157, -8.688973337940297], [-2.749291175796914, 0.14857940313495283], [3.6624329603967447, -3.2964047450773286], [-11.397682528051437, 4.801936157409642], [1.8249903341732683, -10.272991933186658], [-8.887650810106138, 6.086831352507889], [0.8455226954068902, 2.3715664703898263], [-8.267495822674668, 9.5834331985322], [-3.1313098961010932, 6.7453038441571485], [11.023449179178861, 6.871893680720533], [4.2935270166550765, 0.2896897492377619], [4.377613635282869, 8.315574141633695]]}, \"id\": \"el16248140525789366800\"});\n",
+        "   }(mpld3);\n",
+        "}else if(typeof define === \"function\" && define.amd){\n",
+        "   // require.js is available: use it to load d3/mpld3\n",
+        "   require.config({paths: {d3: \"https://mpld3.github.io/js/d3.v3.min\"}});\n",
+        "   require([\"d3\"], function(d3){\n",
+        "      window.d3 = d3;\n",
+        "      mpld3_load_lib(\"https://mpld3.github.io/js/mpld3.v0.2.js\", function(){\n",
+        "         \n",
+        "         mpld3.draw_figure(\"fig_el162481405257893668009323695359\", {\"axes\": [{\"xlim\": [-15.0, 20.0], \"yscale\": \"linear\", \"axesbg\": \"#EEEEEE\", \"texts\": [], \"zoomable\": true, \"images\": [], \"xdomain\": [-15.0, 20.0], \"ylim\": [-20.0, 15.0], \"paths\": [], \"sharey\": [], \"sharex\": [], \"axesbgalpha\": null, \"axes\": [{\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"bottom\", \"nticks\": 8, \"tickvalues\": null}, {\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"left\", \"nticks\": 8, \"tickvalues\": null}], \"lines\": [], \"markers\": [], \"id\": \"el16248140525596270160\", \"ydomain\": [-20.0, 15.0], \"collections\": [{\"paths\": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], [\"M\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"Z\"]]], \"edgecolors\": [\"#000000\"], \"edgewidths\": [1.0], \"offsets\": \"data01\", \"yindex\": 1, \"id\": \"el16248140525596421968\", \"pathtransforms\": [[11.11111111111111, 0.0, 0.0, 11.11111111111111, 0.0, 0.0]], \"pathcoordinates\": \"display\", \"offsetcoordinates\": \"data\", \"zorder\": 1, \"xindex\": 0, \"alphas\": [0.1], \"facecolors\": [\"#3EEEEE\"]}], \"xscale\": \"linear\", \"bbox\": [0.125, 0.125, 0.77500000000000002, 0.77500000000000002]}], \"height\": 640.0, \"width\": 640.0, \"plugins\": [{\"type\": \"reset\"}, {\"enabled\": false, \"button\": true, \"type\": \"zoom\"}, {\"enabled\": false, \"button\": true, \"type\": \"boxzoom\"}, {\"voffset\": 10, \"labels\": [\"the\", \"<unk>\", \"N\", \"of\", \"to\", \"a\", \"in\", \"and\", \"'s\", \"that\", \"for\", \"$\", \"is\", \"it\", \"said\", \"on\", \"by\", \"at\", \"as\", \"from\", \"million\", \"with\", \"mr.\", \"was\", \"be\", \"are\", \"its\", \"he\", \"but\", \"has\", \"an\", \"n't\", \"will\", \"have\", \"new\", \"or\", \"company\", \"they\", \"this\", \"year\", \"which\", \"would\", \"about\", \"says\", \"more\", \"were\", \"market\", \"billion\", \"his\", \"had\", \"their\", \"up\", \"u.s.\", \"one\", \"than\", \"who\", \"some\", \"been\", \"also\", \"stock\", \"other\", \"share\", \"not\", \"we\", \"corp.\", \"if\", \"when\", \"i\", \"last\", \"shares\", \"president\", \"years\", \"all\", \"first\", \"two\", \"trading\", \"because\", \"after\", \"could\", \"inc.\", \"sales\", \"&\", \"there\", \"out\", \"business\", \"only\", \"do\", \"such\", \"can\", \"most\", \"into\", \"york\", \"may\", \"over\", \"co.\", \"group\", \"many\", \"government\", \"now\", \"federal\", \"companies\", \"no\", \"time\", \"bank\", \"so\", \"any\", \"cents\", \"people\", \"quarter\", \"you\", \"exchange\", \"prices\", \"even\", \"what\", \"price\", \"investors\", \"say\", \"down\", \"rose\", \"while\", \"much\", \"yesterday\", \"week\", \"under\", \"securities\", \"months\", \"them\", \"bonds\", \"big\", \"next\", \"interest\", \"three\", \"earlier\", \"'\", \"net\", \"earnings\", \"major\", \"make\", \"state\", \"american\", \"financial\", \"chairman\", \"did\", \"these\", \"investment\", \"board\", \"still\", \"through\", \"stocks\", \"those\", \"just\", \"chief\", \"industry\", \"executive\", \"since\", \"program\", \"before\", \"rate\", \"made\", \"officials\", \"money\", \"national\", \"she\", \"house\", \"analysts\", \"like\", \"unit\", \"month\", \"off\", \"expected\", \"days\", \"rates\", \"japanese\", \"against\", \"plan\", \"does\", \"profit\", \"between\", \"both\", \"capital\", \"recent\", \"sell\", \"buy\", \"income\", \"issue\", \"revenue\", \"get\", \"general\", \"products\", \"markets\", \"firm\", \"back\", \"funds\", \"own\", \"ago\", \"average\", \"international\", \"during\", \"her\", \"well\", \"part\", \"japan\", \"fell\", \"should\", \"another\", \"higher\", \"debt\", \"offer\", \"take\", \"including\", \"among\", \"court\", \"being\", \"according\", \"each\", \"index\", \"tax\", \"world\", \"trade\", \"reported\", \"work\", \"operations\", \"then\", \"past\", \"computer\", \"sale\", \"way\", \"however\", \"our\", \"lower\", \"plans\", \"vice\", \"economic\", \"department\", \"yield\", \"end\", \"report\", \"sold\", \"insurance\", \"high\", \"growth\", \"how\", \"increase\", \"foreign\", \"less\", \"common\", \"banks\", \"several\", \"closed\", \"issues\", \"where\", \"very\", \"loss\", \"yen\", \"pay\", \"bush\", \"bid\", \"five\", \"due\", \"bill\", \"few\", \"used\", \"good\", \"current\", \"management\", \"early\", \"cash\", \"oil\", \"use\", \"costs\", \"bond\", \"day\", \"system\", \"public\", \"director\", \"third\", \"'re\", \"law\", \"might\", \"traders\", \"treasury\", \"friday\", \"office\", \"added\", \"city\", \"congress\", \"futures\", \"concern\", \"officer\", \"far\", \"late\", \"fund\", \"already\", \"number\", \"california\", \"assets\", \"least\", \"operating\", \"small\", \"spokesman\", \"him\", \"agency\", \"british\", \"san\", \"based\", \"too\", \"case\", \"real\", \"value\", \"news\", \"september\", \"same\", \"oct.\", \"until\", \"think\", \"contract\", \"research\", \"union\", \"stake\", \"close\", \"home\", \"street\", \"services\", \"going\", \"today\", \"little\", \"ended\", \"though\", \"move\", \"wall\", \"agreement\", \"dollar\", \"help\", \"second\", \"put\", \"service\", \"former\", \"power\", \"maker\", \"period\", \"called\", \"results\", \"total\", \"administration\", \"agreed\", \"four\", \"here\", \"third-quarter\", \"without\", \"control\", \"long\", \"corporate\", \"economy\", \"credit\", \"problems\", \"offering\", \"want\", \"country\", \"production\", \"buying\", \"loans\", \"cost\", \"six\", \"analyst\", \"firms\", \"annual\", \"although\", \"increased\", \"whether\", \"compared\", \"likely\", \"committee\", \"policy\", \"point\", \"recently\", \"notes\", \"cut\", \"see\", \"west\", \"large\", \"right\", \"monday\", \"soviet\", \"around\", \"set\", \"go\", \"continue\", \"half\", \"political\", \"life\", \"losses\", \"further\", \"old\", \"points\", \"volume\", \"yet\", \"august\", \"paper\", \"selling\", \"john\", \"plant\", \"judge\", \"strong\", \"must\", \"my\", \"expects\", \"nov.\", \"ual\", \"london\", \"result\", \"announced\", \"declined\", \"largest\", \"support\", \"fiscal\", \"held\", \"wo\", \"systems\", \"francisco\", \"times\", \"weeks\", \"takeover\", \"making\", \"priced\", \"certain\", \"earthquake\", \"become\", \"change\", \"gain\", \"composite\", \"workers\", \"problem\", \"businesses\", \"come\", \"south\", \"demand\", \"give\", \"industrial\", \"record\", \"nearly\", \"series\", \"inc\", \"development\", \"white\", \"senior\", \"association\", \"dow\", \"area\", \"members\", \"data\", \"air\", \"estimated\", \"took\", \"official\", \"orders\", \"employees\", \"trust\", \"jones\", \"estate\", \"decline\", \"level\", \"senate\", \"line\", \"show\", \"latest\", \"later\", \"health\", \"example\", \"acquisition\", \"drop\", \"comment\", \"junk\", \"tuesday\", \"commission\", \"meeting\", \"holding\", \"commercial\", \"need\", \"ford\", \"know\", \"building\", \"your\", \"texas\", \"chicago\", \"despite\", \"ms.\", \"currently\", \"addition\", \"paid\", \"proposal\", \"possible\", \"executives\", \"offered\", \"others\", \"purchase\", \"deal\", \"rise\", \"proposed\", \"once\", \"loan\"], \"hoffset\": 0, \"location\": \"mouse\", \"type\": \"tooltip\", \"id\": \"el16248140525596421968\"}], \"data\": {\"data01\": [[11.071193293788813, 1.5426625468387454], [-1.1194151362641411, -4.418706634375533], [-5.165894505703799, 7.608393905789143], [5.069451422876669, -6.660822460279021], [7.469071974980342, -10.983766152119237], [11.030036850725503, 1.2989793753772856], [4.906552563422692, -6.068305260649689], [1.3667324616352865, -11.481533660068058], [7.324557797051708, 6.852584913226878], [-3.438019051433326, -12.290415751008762], [5.4586967507185, -6.597647178465341], [7.558492279713394, -12.589421109394285], [14.466785244642109, -1.548038672985574], [-8.15970843948952, -10.199875127735085], [-1.6908310677014686, -11.852345452702428], [5.111923341217739, -6.6342331545127955], [5.3115106069848705, -6.747278747977412], [5.827904851435067, -6.991045056956195], [5.722882884765794, -7.684200381474289], [5.627234643109184, -7.148595579772625], [-8.283305743348016, -4.79722790503902], [5.484729335158506, -7.082702802674851], [11.59417952030527, -4.024637510671848], [14.51629783442133, -1.4111983019483083], [14.022146386095692, -0.6219370492998908], [14.43222380167582, -1.5346340212250635], [11.00749732049248, 1.6391665510847495], [-10.217684602978833, -9.035887646737166], [-3.454786087204529, -12.250474328629112], [9.096888256709667, -8.722497450379931], [12.044409292182719, -3.1986187811411315], [9.429807870971683, -8.49743611491662], [-2.2288753618973507, -15.253613318899909], [9.092538108069261, -8.71806526584601], [12.70141662114709, 2.9528308793458025], [6.912326168974564, -7.070321010292854], [-4.674449140747841, -3.9580106268256334], [-10.405705865187468, 6.457186792920277], [8.100888170736711, 6.277203935057833], [-2.3832792087817425, 3.955289638302907], [-3.5961382978866525, -12.26002968369479], [-2.2050273729703687, -15.235674238198325], [6.942748677938527, -6.632751209328568], [-1.705533792903998, -11.897456613086906], [12.23073824636912, 2.1295182457210227], [14.426227169883608, -1.4003566381336006], [5.031106785602546, 10.10801662546567], [3.274449505103534, 8.573110104251828], [11.29358388420506, 1.3693549112325571], [9.050376717517727, -8.72135324419009], [10.680710367518737, 1.6382669501827354], [5.495036475993081, -12.956385119722693], [1.1396387204070828, -13.726466094951538], [13.82469165532339, 4.752381817240819], [5.8192393316725095, -6.480494846617212], [-8.066152903681436, -10.450052845318398], [-9.788859562141115, -2.453292697772645], [14.162319035742925, -0.6876624736812756], [-0.47474697995510096, 11.997520962292374], [0.8731166160580155, 7.842901765685997], [7.709884241510655, 2.9618307699798923], [-8.500387753469303, -1.6769763719210278], [8.65525196309655, -8.196053633080503], [-9.98303535021694, 5.602886018695526], [-7.662960317114181, -4.124326657989969], [-3.0687015830196467, -12.19221909118473], [-3.1156114098995955, -12.222434222151247], [-3.124173720168715, -14.533739736965828], [7.734767747359909, 6.285636740207656], [-7.138227442009886, 6.270227692453355], [-5.395225379876008, -11.024790762478048], [-3.633809956835943, 5.5083734481093645], [-11.073395462313103, -1.1663242579742454], [7.074624902074825, 8.819350729932387], [13.934617598466307, 4.761856297182513], [0.27925386685813813, 7.993653585823863], [-3.1543634452835145, -12.215042543049824], [5.753798280566251, -6.692801942998173], [-2.1483754722687642, -15.188744689848878], [-7.666876197289415, -4.130861375527113], [-5.03407287976596, 8.110273353393712], [-4.9570462774054205, -8.618406168456824], [-6.93930123769212, 4.358533594809605], [-9.918827395938834, -0.6389512637519424], [-2.0949681841472474, 0.718930222405829], [-0.4220704011980053, 11.106842947733336], [-1.4183030369607281, -14.584840474223324], [0.2630465476544743, -8.1528004590429], [-2.2195997562422534, -15.239428281534117], [13.506747022321711, -1.3347292903400194], [4.96116256193548, -6.81035797474379], [-8.200995728026193, -8.551026914434017], [-2.2342256299487917, -15.245490153090019], [5.497429760734615, -6.019400244413265], [-7.661365338234572, -4.149570314562168], [-5.215772126582202, -6.354278576789704], [7.100994626719128, 0.8897576487119475], [-3.4586479987922947, -3.603568547970911], [-0.18834392835946986, 11.855144750148193], [8.70317579430114, 3.2492513302445927], [-7.867477922029315, 6.466590357708744], [9.87937139138166, 2.1161022704841663], [1.6427208082979454, 13.386936272412763], [-7.443289482083182, -7.280142656501182], [13.055310346573064, -1.3989143309745569], [6.326410514134346, 2.440479517231073], [1.5626223253167293, -11.032510498933416], [-9.39064405326907, 5.482493285266896], [-6.774204380217179, 1.8627575852415266], [-9.859879926107059, 5.458951140050983], [-3.815141148531592, -3.8026323334455663], [-5.702915524094395, 7.342889222499131], [0.5686877866453386, 11.969518879446909], [-3.471893267014123, -12.279600952507007], [-7.220908002137964, -7.194638204263702], [-8.172177252119376, 6.123378226583951], [-2.0687849990418723, -11.718680965456715], [5.516383627337457, -12.897162606400554], [5.974251120254436, -12.540688072159409], [-3.252182398438716, -12.2851238732187], [-1.504345090454669, 4.6383067552446535], [-11.34023393976883, -7.42288946271433], [-3.873038575581622, -1.5006721457267074], [5.183907218858897, -6.982776838426966], [-3.2865577339589596, -8.573883799003385], [-6.433596852119819, 1.7463316803544162], [-11.170607119679428, 7.092295186300019], [-5.985798345167941, 6.3815329811004355], [5.982317082002857, -1.5131621624991967], [7.590385505910043, 6.166716623841581], [5.995665286948711, 8.340637032200076], [13.918215988496465, 4.761157823581358], [2.6306566026431843, 9.20992893882945], [10.412919855644708, 1.6012467475221845], [8.309478639588024, 7.600899352428367], [-4.848396530497164, 8.129130968948996], [6.560923034657423, -1.1729890294512941], [4.371120125304053, -9.088463356147995], [3.126466714489998, 3.772927864311192], [7.167015409502914, -1.5557507763571847], [8.713763533654609, 4.475071445580907], [-5.28935100027962, -11.040837040216381], [-1.42647967700982, -14.585057318910815], [7.92333344018428, 3.48456646834172], [-1.4355467747054738, 7.208019488182383], [-4.4099377568880485, -3.418614509424135], [-0.12294372257754292, 11.901211291450005], [4.916567882218723, -6.508776536223346], [-6.852065598617995, 6.656012476025483], [9.38836987708756, 4.9158483554666494], [-0.5424720070298312, 10.897875702686672], [-9.189969484408513, -7.120779216244257], [-3.9149285068337654, -2.4650886591568177], [9.926550203578799, -6.229340692040948], [8.171688897311107, -10.80609539496742], [5.557756214579422, 9.266558424505439], [0.7896926425859543, -10.704752974726789], [-1.5540202558278846, 9.231867824430806], [4.128072172683088, -8.742842666611109], [-11.422154104276254, 5.023239471860592], [0.48836788418584964, 7.850251038517146], [8.989600457700785, 3.5910749612371258], [-10.215111068075041, -9.037536262859362], [-5.865860319612476, -2.979357215972594], [-11.265370788373712, 5.966137902685077], [3.522414125970239, -13.018367395797936], [-8.920820995665071, -3.6054850450362017], [-2.3973598245755197, 7.311805954904842], [-1.653710816942467, 11.091341050733918], [0.2905771767741918, -13.270103421590235], [-3.8516729480872653, 5.579522064284861], [-5.684651384450539, 6.955518569582586], [6.720985169803443, 0.6214337673267755], [5.301466326183714, -6.446821708829237], [-13.322214787292358, -3.70731749839284], [-1.4390702062269853, -14.592027532452658], [-4.702073458932197, 8.160428409482265], [6.3116680259348215, -6.288847372212669], [12.424350789357742, 3.6656465699943976], [6.863039188725628, 8.491744272215962], [7.242721225728653, 5.258067083793459], [5.17615160534442, 9.993000531723565], [6.514836970300554, -9.637521519101217], [-4.423343800533534, 8.318832729449518], [-6.911110537687643, 0.8938437949192872], [-4.932532850568996, 8.10823873623249], [4.74109239981676, -9.078844325410543], [9.122591662406462, -1.0287287601476056], [-8.225813564418706, 6.539931013439156], [-5.7480541428837935, 4.267921238132986], [-4.534712118355969, -2.6152257803510013], [-1.7415721981405388, 10.436453059286642], [-6.023418614719078, 6.784609109498126], [3.779607363293929, -2.6450118771575752], [-1.6137805676422352, 11.30797060134802], [-12.421848410031822, 1.543947011478871], [12.113667541986471, 6.2184296099758045], [5.0842588219345695, -6.148468238923174], [9.792052648742894, 0.11101492037727866], [-1.4797583045738891, 4.445237372953385], [-9.415152038410563, -0.5396492814875418], [-5.520198244933204, -3.630284481341042], [5.956281806618545, -12.529746211053173], [-2.1989999008132486, -15.218288298954185], [6.1905421008903385, 2.6711597090839225], [15.223160069094618, -5.512090217698532], [-1.9846840104982877, 8.375502659253508], [-4.9540294297864556, -0.8526600078122378], [5.1568580039631255, -10.134271173219712], [5.142982965708817, -6.886218021482505], [5.6439408956578125, -6.400591615937892], [-4.374740109927609, -1.9257292676638085], [13.888314634799396, -0.5924582526708945], [-12.907420732528545, -2.506967847176809], [-8.994190406272345, -6.033114512398679], [-8.962555719679775, -9.118610334815829], [8.568954947841283, 6.66177841627263], [-4.842579351615124, -10.16554933519015], [2.785854607407318, 5.015766534313583], [0.9693944217698962, -12.226482998254268], [-6.547906720059921, 10.67085517847542], [-10.528582717267874, 2.9852091263779816], [-0.07988832792938069, 11.673115042026662], [6.856060746036312, 6.405335963686177], [-8.460021555555807, 10.853483849963066], [-7.928750011965152, 0.6910152370449048], [-2.5291793815865335, 1.6247693288340355], [-1.3577358436824551, 11.706700032362283], [10.780222246634885, 1.6357469761674857], [15.220324863902954, -5.515869273396297], [-12.410445416632152, -3.778735130263766], [9.250311621405297, -6.654855729596579], [8.41667490442455, 1.9320045880051457], [-8.193555088132433, -2.69016663769927], [-3.2222864665129767, 10.78517310595299], [-8.750285996377679, -0.3577252312966788], [-4.185165727648709, 4.260068702919416], [5.88366703763561, -9.290468325581381], [4.316841419619275, 7.146856717810065], [4.855543382732219, 6.448839330060639], [-0.5940666666378962, 7.760315954900982], [-8.15525324015067, -10.433761575471548], [0.17170641120436345, 8.883792014067684], [6.814958764784381, 3.489158334758788], [12.152855539736425, 2.1335232733668965], [-9.776409944531238, -6.155282806741743], [-8.05374599437549, 6.28892995842513], [13.66008332736535, 4.631423103873609], [1.2430998929487826, -9.574141391845089], [-6.13106853782891, 7.1956348286482426], [-3.2595330058344656, -12.248726157706724], [13.22731728990445, -1.768914238544623], [-9.128486340782025, 1.560454254045868], [-9.192331437309722, 1.8144578146909518], [2.2718528932434356, 8.028320603550126], [2.888002436682519, 10.19743549587964], [-6.013312498753442, -0.1645164240418375], [13.915696166345226, 4.765772152696068], [1.9369320357747557, -9.29486596096833], [-2.438636626325507, -1.1462546317084852], [13.758091859573868, 4.649147698637093], [1.8486019296175709, -8.211185676435624], [7.732556244209111, 2.117796275064272], [5.783238641602565, 5.466663490468544], [-4.925502564890372, -4.321055155657129], [4.122445309457146, 9.70693764325037], [8.752129143874246, 6.358489449828919], [8.140722784828023, 9.22389325517649], [4.070928460282057, -8.939007937520358], [-11.731135386186741, 2.6211676312154712], [-8.337761950390387, -8.195767800900171], [-3.9503500483470684, -1.5756172652948726], [-2.00587049077801, 0.15680313566918272], [5.314451746839049, 1.579513740147483], [-5.425646207697813, -11.034166639346383], [10.033933440811088, 5.628058917310408], [14.307059473691913, -1.5017657000061733], [-3.12958041332649, -1.977525791066316], [-2.2098420421023337, -15.22147575101788], [-11.536756584351629, 5.878516124862865], [-7.493620268162755, -8.909906824000768], [-11.328973977783424, -7.414139397053552], [-4.617501685092901, -1.319233003671606], [-1.7384595987997962, -9.616285422260573], [-6.244328684632257, -4.739257971669029], [-5.487751113849952, -2.388900688147781], [1.0933872120298311, 7.859456549451518], [-7.58952329668113, -4.915852210218887], [-8.508848555011323, -3.042331861454137], [3.3634665492073483, 10.723428227480838], [4.779628336539369, 10.6174856479974], [-3.5978462826516484, -3.332611597753655], [0.12873743265538048, 12.211359636340484], [-10.664083682166192, 0.3555506211157833], [-4.266464485165099, -2.7841236093141273], [-6.204479304153358, 7.194874307621534], [3.180792468730995, 5.736460385222325], [8.18348576123777, 7.786154096380171], [6.4619780743553825, 3.143078892104144], [-6.914039992465257, -10.603207455471539], [-5.280843340993378, 3.4293881870711447], [-5.409721113120703, -3.1328305682420674], [6.853540692985112, 0.7130086772043848], [12.173207076922573, -3.739667470946415], [-10.738374282865731, 9.109315584801019], [13.316863946346402, -1.7398730919388314], [-7.231442612826701, 4.08818302056863], [9.505251142978956, 2.705074291672686], [-12.26048631629087, 1.5527450929242785], [-3.5192424309702224, 9.75573507402325], [-1.885738742457241, 8.125770139017462], [6.984896482876344, 5.412108740554408], [7.535568658963388, -12.40106211894096], [8.153292244391048, -10.802179757035569], [-1.9533301050969056, -11.202001938255314], [-7.186236374685793, 11.482378111152027], [1.2787995498523619, 5.072599271479204], [-3.2255877530815487, -2.994602062728024], [-3.0833948007261105, 5.549897311246674], [-1.5199993850952649, -2.893667464675612], [2.939252232906412, 6.392893710295347], [1.015389185171945, 4.974996789191783], [-12.125639722246678, 1.1723951632403784], [3.8828819442147635, -11.955969451879733], [-11.293337102686232, -7.357801212011153], [1.4775349788987966, 7.032131322305244], [4.751549817771654, 10.62288769017103], [-3.29066905181777, -12.225520441228046], [-3.2695562118309636, 6.385305095855594], [-9.267437625569649, -7.336573897531918], [-7.146785329637891, 11.344795636352979], [1.246224264578295, 9.355398898280214], [-13.328813755050609, -3.0779007150102338], [9.803243436922005, 5.595332815873618], [4.339840962023357, -9.022701636760189], [-4.392568278563389, -5.922791012362278], [9.875790990377823, -5.056454002473141], [-2.889026051999338, 12.176199568284838], [-9.159907948763678, -2.3353186704128905], [-6.636898513443478, 1.8285734266563165], [3.8420880352834184, -6.869588472956859], [-5.711318809714862, 7.095052298588258], [5.386330520738454, 7.089430838724529], [-3.3775901026306907, -2.7403099961005637], [-12.336166573228578, -4.54254358657389], [13.916354607535817, 4.7638782001923765], [-5.867974564100238, 3.7936526339845713], [7.827770208495308, 7.808766977493467], [6.551042708815454, -7.352833383016251], [-8.282244449342544, -1.5488653013340703], [1.3513132838579556, 6.542686628727576], [5.012341267726815, 3.335400784197255], [1.5585631478925852, 9.054178760914844], [3.3381063680853664, 7.533584533891047], [-7.388064494218034, 7.661735655133439], [-8.966715125646207, 1.403851194156259], [-12.260335075393314, -4.170685018978582], [-4.4577362221383385, -2.505381395280374], [-1.034455104140975, 8.112665233227126], [4.173339034444273, 6.716141417324061], [-7.645229220244572, 6.467504475214934], [-12.247960481330201, 2.1330821025111324], [13.915335286386915, 4.770276459637884], [-6.111801311913414, -10.700936952912222], [-8.051166620428798, 6.356083981982525], [7.508736186380432, 7.904543517429075], [-3.194643995796129, -12.231954227668274], [5.25019710792089, 7.24835951666805], [-3.3342809843647885, -12.25239918052111], [-8.36648332317541, 10.133211039923825], [-11.981557479784058, -4.07449085156721], [-4.329923967721768, -1.7182837427681041], [0.9734182034733058, 3.252258019237875], [-13.019300145453762, 2.017057716103325], [0.19229827864573162, 12.148753799273164], [-5.846555082638568, 6.234820281290875], [0.1733630181248346, 8.772346084881407], [1.1859614172611512, -8.018920247392897], [13.957859423686344, -2.7544683348971355], [5.834363749709343, 3.3940943783038184], [0.49362555870989433, 9.765808438033352], [-11.314857834085222, -7.405339471638212], [7.307611712664904, 0.9155536370259291], [4.335325772416614, -6.0651351945641085], [4.1966797075833675, -10.054707177470178], [-0.958282586271381, 6.49707163455318], [-12.075875170031143, -3.5757229478682535], [-9.986491096598163, -2.4284884552210046], [8.485842986372607, 1.3808982448934493], [4.468974841029809, 8.955904587762546], [-5.179946598609937, 9.296980801752733], [4.896838518990785, 8.153772975791682], [5.502640666457967, -0.7994612957562626], [-3.876570276079939, 6.222876996422032], [-1.6334435271775738, 6.3187085975765305], [-0.43592792752964465, 11.697427774286153], [-2.1922065430183073, 8.10489117212735], [-3.8618288997971484, -7.72419293170287], [6.90150074443438, 5.431433306209803], [10.625098668003286, -4.422774512548975], [-2.534673429825065, 0.6485925802817538], [-5.0146168407355685, -10.877313865210741], [5.842880437272215, 4.80205816785489], [-2.1901877921671096, -15.218203611069248], [11.230361959967299, 1.2355681662314453], [5.281053464855597, -8.898533565177326], [7.521769510838662, -12.39411953692738], [-7.082254709188155, -5.670363639615193], [3.147652303275819, 12.84072105143929], [-7.028000035111452, 0.7711688268755114], [5.9304369718439975, -8.110323952899442], [-12.619930079358841, -4.113399059581858], [6.01172231781453, 2.5180211512337274], [-7.614808269852853, 0.32008231915535257], [7.620706192112162, -12.405862567992013], [0.7553017472323248, -8.563183899546551], [-1.6976122833220084, -14.885670969742044], [-3.74864584316625, -6.740936462808057], [5.78960824502848, -1.793052217537389], [-5.112405227523367, 4.162662000525701], [-3.773006818070283, 5.32285748896222], [-4.251449796200577, -9.124881991257352], [4.32209257344125, -8.896550523605562], [-13.327235958770808, 0.9459750191234055], [9.316545058486055, 3.9997292208267767], [4.437119001195094, 10.101759216927467], [5.920455103248595, -7.791101988031239], [-3.289614768820118, 6.6982113214621055], [-1.4301438078859507, 8.926709483678636], [-9.034222964945798, -9.31331473475792], [-9.260428516210261, 5.109812546242018], [-9.994119411727652, 7.87334041746346], [-7.787065919262201, 6.254317488906279], [-9.315553338236843, 8.459630607805734], [7.0161816281315526, -2.102934284199215], [-4.275406889122285, 7.243245016304494], [7.054480110799861, -8.827021816268623], [7.843132295101665, 0.4750934719560204], [3.0731082423081446, 7.675049616546453], [7.23216234058352, -6.5793852665691155], [-10.859084776247803, -0.10504057133953593], [-13.193539861753662, 5.4454215137159805], [-11.465233629789536, 0.574324559596368], [6.061410574409012, -2.715546072241345], [6.817276129047788, -0.470352801469562], [-4.475492651176828, -1.1166918506749053], [-4.601512216847428, -7.533236668802977], [-7.1152264268237815, 1.1997122050520437], [-10.231290541538304, 3.640699232212779], [-12.057631903514501, 1.1743812295038294], [10.4575973416176, 3.368967411566342], [0.2820638447180123, -13.217236009096464], [5.225019532839203, -9.662167261773728], [-8.190508434699867, -3.342078489563604], [-5.2481904937626105, 6.616082988949221], [-8.458726630052112, 5.359641368374514], [-6.680885132975456, -6.676421580518651], [6.302399511917023, 1.195961090130331], [-9.451271145332587, -5.254862099080876], [-2.8876617468255232, 7.7360419701577365], [-7.4319972928250415, 1.6728296613418272], [8.55558839277116, 3.5642025977140346], [-8.949294444239609, -3.909696890593712], [-0.12821701586919312, -9.285609834976647], [7.361684048483804, 6.123748735780253], [-1.2795701676186437, 11.600643941868572], [2.4543973150871765, 5.76509592342997], [-3.8113659367114026, 1.1425442105338328], [-8.566923428956176, -4.239410702579881], [-2.9819439776833985, 6.958446682552351], [-4.9662854545125725, 2.7902344006802173], [6.469062616351551, 7.756190071538844], [-11.325554602695412, -7.408974556162495], [-4.117928133911796, -1.4580976909540944], [-3.4353567286762057, 0.23361523633895015], [-2.747075052645658, -8.180404628861531], [6.542621366255626, -1.315787994436245], [7.208379848518947, -7.193072129333574], [-6.698909119650492, -4.919420812363325], [-1.1115590069682648, -9.192696632654567], [-0.979389461159814, -3.385653544350394], [10.781364912779447, 1.400555606226705], [-3.643438930842627, -7.614768531144896], [-3.3922086085591947, -5.363131899594515], [5.347659078074252, -7.241049741359242], [11.359075997328882, -3.881737845643038], [-0.7196508021082505, 12.063795149716126], [-2.8220935604163153, -11.19697636269803], [2.6401010124045157, -8.688973337940297], [-2.749291175796914, 0.14857940313495283], [3.6624329603967447, -3.2964047450773286], [-11.397682528051437, 4.801936157409642], [1.8249903341732683, -10.272991933186658], [-8.887650810106138, 6.086831352507889], [0.8455226954068902, 2.3715664703898263], [-8.267495822674668, 9.5834331985322], [-3.1313098961010932, 6.7453038441571485], [11.023449179178861, 6.871893680720533], [4.2935270166550765, 0.2896897492377619], [4.377613635282869, 8.315574141633695]]}, \"id\": \"el16248140525789366800\"});\n",
+        "      });\n",
+        "    });\n",
+        "}else{\n",
+        "    // require.js not available: dynamically load d3 & mpld3\n",
+        "    mpld3_load_lib(\"https://mpld3.github.io/js/d3.v3.min.js\", function(){\n",
+        "         mpld3_load_lib(\"https://mpld3.github.io/js/mpld3.v0.2.js\", function(){\n",
+        "                 \n",
+        "                 mpld3.draw_figure(\"fig_el162481405257893668009323695359\", {\"axes\": [{\"xlim\": [-15.0, 20.0], \"yscale\": \"linear\", \"axesbg\": \"#EEEEEE\", \"texts\": [], \"zoomable\": true, \"images\": [], \"xdomain\": [-15.0, 20.0], \"ylim\": [-20.0, 15.0], \"paths\": [], \"sharey\": [], \"sharex\": [], \"axesbgalpha\": null, \"axes\": [{\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"bottom\", \"nticks\": 8, \"tickvalues\": null}, {\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"left\", \"nticks\": 8, \"tickvalues\": null}], \"lines\": [], \"markers\": [], \"id\": \"el16248140525596270160\", \"ydomain\": [-20.0, 15.0], \"collections\": [{\"paths\": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], [\"M\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"Z\"]]], \"edgecolors\": [\"#000000\"], \"edgewidths\": [1.0], \"offsets\": \"data01\", \"yindex\": 1, \"id\": \"el16248140525596421968\", \"pathtransforms\": [[11.11111111111111, 0.0, 0.0, 11.11111111111111, 0.0, 0.0]], \"pathcoordinates\": \"display\", \"offsetcoordinates\": \"data\", \"zorder\": 1, \"xindex\": 0, \"alphas\": [0.1], \"facecolors\": [\"#3EEEEE\"]}], \"xscale\": \"linear\", \"bbox\": [0.125, 0.125, 0.77500000000000002, 0.77500000000000002]}], \"height\": 640.0, \"width\": 640.0, \"plugins\": [{\"type\": \"reset\"}, {\"enabled\": false, \"button\": true, \"type\": \"zoom\"}, {\"enabled\": false, \"button\": true, \"type\": \"boxzoom\"}, {\"voffset\": 10, \"labels\": [\"the\", \"<unk>\", \"N\", \"of\", \"to\", \"a\", \"in\", \"and\", \"'s\", \"that\", \"for\", \"$\", \"is\", \"it\", \"said\", \"on\", \"by\", \"at\", \"as\", \"from\", \"million\", \"with\", \"mr.\", \"was\", \"be\", \"are\", \"its\", \"he\", \"but\", \"has\", \"an\", \"n't\", \"will\", \"have\", \"new\", \"or\", \"company\", \"they\", \"this\", \"year\", \"which\", \"would\", \"about\", \"says\", \"more\", \"were\", \"market\", \"billion\", \"his\", \"had\", \"their\", \"up\", \"u.s.\", \"one\", \"than\", \"who\", \"some\", \"been\", \"also\", \"stock\", \"other\", \"share\", \"not\", \"we\", \"corp.\", \"if\", \"when\", \"i\", \"last\", \"shares\", \"president\", \"years\", \"all\", \"first\", \"two\", \"trading\", \"because\", \"after\", \"could\", \"inc.\", \"sales\", \"&\", \"there\", \"out\", \"business\", \"only\", \"do\", \"such\", \"can\", \"most\", \"into\", \"york\", \"may\", \"over\", \"co.\", \"group\", \"many\", \"government\", \"now\", \"federal\", \"companies\", \"no\", \"time\", \"bank\", \"so\", \"any\", \"cents\", \"people\", \"quarter\", \"you\", \"exchange\", \"prices\", \"even\", \"what\", \"price\", \"investors\", \"say\", \"down\", \"rose\", \"while\", \"much\", \"yesterday\", \"week\", \"under\", \"securities\", \"months\", \"them\", \"bonds\", \"big\", \"next\", \"interest\", \"three\", \"earlier\", \"'\", \"net\", \"earnings\", \"major\", \"make\", \"state\", \"american\", \"financial\", \"chairman\", \"did\", \"these\", \"investment\", \"board\", \"still\", \"through\", \"stocks\", \"those\", \"just\", \"chief\", \"industry\", \"executive\", \"since\", \"program\", \"before\", \"rate\", \"made\", \"officials\", \"money\", \"national\", \"she\", \"house\", \"analysts\", \"like\", \"unit\", \"month\", \"off\", \"expected\", \"days\", \"rates\", \"japanese\", \"against\", \"plan\", \"does\", \"profit\", \"between\", \"both\", \"capital\", \"recent\", \"sell\", \"buy\", \"income\", \"issue\", \"revenue\", \"get\", \"general\", \"products\", \"markets\", \"firm\", \"back\", \"funds\", \"own\", \"ago\", \"average\", \"international\", \"during\", \"her\", \"well\", \"part\", \"japan\", \"fell\", \"should\", \"another\", \"higher\", \"debt\", \"offer\", \"take\", \"including\", \"among\", \"court\", \"being\", \"according\", \"each\", \"index\", \"tax\", \"world\", \"trade\", \"reported\", \"work\", \"operations\", \"then\", \"past\", \"computer\", \"sale\", \"way\", \"however\", \"our\", \"lower\", \"plans\", \"vice\", \"economic\", \"department\", \"yield\", \"end\", \"report\", \"sold\", \"insurance\", \"high\", \"growth\", \"how\", \"increase\", \"foreign\", \"less\", \"common\", \"banks\", \"several\", \"closed\", \"issues\", \"where\", \"very\", \"loss\", \"yen\", \"pay\", \"bush\", \"bid\", \"five\", \"due\", \"bill\", \"few\", \"used\", \"good\", \"current\", \"management\", \"early\", \"cash\", \"oil\", \"use\", \"costs\", \"bond\", \"day\", \"system\", \"public\", \"director\", \"third\", \"'re\", \"law\", \"might\", \"traders\", \"treasury\", \"friday\", \"office\", \"added\", \"city\", \"congress\", \"futures\", \"concern\", \"officer\", \"far\", \"late\", \"fund\", \"already\", \"number\", \"california\", \"assets\", \"least\", \"operating\", \"small\", \"spokesman\", \"him\", \"agency\", \"british\", \"san\", \"based\", \"too\", \"case\", \"real\", \"value\", \"news\", \"september\", \"same\", \"oct.\", \"until\", \"think\", \"contract\", \"research\", \"union\", \"stake\", \"close\", \"home\", \"street\", \"services\", \"going\", \"today\", \"little\", \"ended\", \"though\", \"move\", \"wall\", \"agreement\", \"dollar\", \"help\", \"second\", \"put\", \"service\", \"former\", \"power\", \"maker\", \"period\", \"called\", \"results\", \"total\", \"administration\", \"agreed\", \"four\", \"here\", \"third-quarter\", \"without\", \"control\", \"long\", \"corporate\", \"economy\", \"credit\", \"problems\", \"offering\", \"want\", \"country\", \"production\", \"buying\", \"loans\", \"cost\", \"six\", \"analyst\", \"firms\", \"annual\", \"although\", \"increased\", \"whether\", \"compared\", \"likely\", \"committee\", \"policy\", \"point\", \"recently\", \"notes\", \"cut\", \"see\", \"west\", \"large\", \"right\", \"monday\", \"soviet\", \"around\", \"set\", \"go\", \"continue\", \"half\", \"political\", \"life\", \"losses\", \"further\", \"old\", \"points\", \"volume\", \"yet\", \"august\", \"paper\", \"selling\", \"john\", \"plant\", \"judge\", \"strong\", \"must\", \"my\", \"expects\", \"nov.\", \"ual\", \"london\", \"result\", \"announced\", \"declined\", \"largest\", \"support\", \"fiscal\", \"held\", \"wo\", \"systems\", \"francisco\", \"times\", \"weeks\", \"takeover\", \"making\", \"priced\", \"certain\", \"earthquake\", \"become\", \"change\", \"gain\", \"composite\", \"workers\", \"problem\", \"businesses\", \"come\", \"south\", \"demand\", \"give\", \"industrial\", \"record\", \"nearly\", \"series\", \"inc\", \"development\", \"white\", \"senior\", \"association\", \"dow\", \"area\", \"members\", \"data\", \"air\", \"estimated\", \"took\", \"official\", \"orders\", \"employees\", \"trust\", \"jones\", \"estate\", \"decline\", \"level\", \"senate\", \"line\", \"show\", \"latest\", \"later\", \"health\", \"example\", \"acquisition\", \"drop\", \"comment\", \"junk\", \"tuesday\", \"commission\", \"meeting\", \"holding\", \"commercial\", \"need\", \"ford\", \"know\", \"building\", \"your\", \"texas\", \"chicago\", \"despite\", \"ms.\", \"currently\", \"addition\", \"paid\", \"proposal\", \"possible\", \"executives\", \"offered\", \"others\", \"purchase\", \"deal\", \"rise\", \"proposed\", \"once\", \"loan\"], \"hoffset\": 0, \"location\": \"mouse\", \"type\": \"tooltip\", \"id\": \"el16248140525596421968\"}], \"data\": {\"data01\": [[11.071193293788813, 1.5426625468387454], [-1.1194151362641411, -4.418706634375533], [-5.165894505703799, 7.608393905789143], [5.069451422876669, -6.660822460279021], [7.469071974980342, -10.983766152119237], [11.030036850725503, 1.2989793753772856], [4.906552563422692, -6.068305260649689], [1.3667324616352865, -11.481533660068058], [7.324557797051708, 6.852584913226878], [-3.438019051433326, -12.290415751008762], [5.4586967507185, -6.597647178465341], [7.558492279713394, -12.589421109394285], [14.466785244642109, -1.548038672985574], [-8.15970843948952, -10.199875127735085], [-1.6908310677014686, -11.852345452702428], [5.111923341217739, -6.6342331545127955], [5.3115106069848705, -6.747278747977412], [5.827904851435067, -6.991045056956195], [5.722882884765794, -7.684200381474289], [5.627234643109184, -7.148595579772625], [-8.283305743348016, -4.79722790503902], [5.484729335158506, -7.082702802674851], [11.59417952030527, -4.024637510671848], [14.51629783442133, -1.4111983019483083], [14.022146386095692, -0.6219370492998908], [14.43222380167582, -1.5346340212250635], [11.00749732049248, 1.6391665510847495], [-10.217684602978833, -9.035887646737166], [-3.454786087204529, -12.250474328629112], [9.096888256709667, -8.722497450379931], [12.044409292182719, -3.1986187811411315], [9.429807870971683, -8.49743611491662], [-2.2288753618973507, -15.253613318899909], [9.092538108069261, -8.71806526584601], [12.70141662114709, 2.9528308793458025], [6.912326168974564, -7.070321010292854], [-4.674449140747841, -3.9580106268256334], [-10.405705865187468, 6.457186792920277], [8.100888170736711, 6.277203935057833], [-2.3832792087817425, 3.955289638302907], [-3.5961382978866525, -12.26002968369479], [-2.2050273729703687, -15.235674238198325], [6.942748677938527, -6.632751209328568], [-1.705533792903998, -11.897456613086906], [12.23073824636912, 2.1295182457210227], [14.426227169883608, -1.4003566381336006], [5.031106785602546, 10.10801662546567], [3.274449505103534, 8.573110104251828], [11.29358388420506, 1.3693549112325571], [9.050376717517727, -8.72135324419009], [10.680710367518737, 1.6382669501827354], [5.495036475993081, -12.956385119722693], [1.1396387204070828, -13.726466094951538], [13.82469165532339, 4.752381817240819], [5.8192393316725095, -6.480494846617212], [-8.066152903681436, -10.450052845318398], [-9.788859562141115, -2.453292697772645], [14.162319035742925, -0.6876624736812756], [-0.47474697995510096, 11.997520962292374], [0.8731166160580155, 7.842901765685997], [7.709884241510655, 2.9618307699798923], [-8.500387753469303, -1.6769763719210278], [8.65525196309655, -8.196053633080503], [-9.98303535021694, 5.602886018695526], [-7.662960317114181, -4.124326657989969], [-3.0687015830196467, -12.19221909118473], [-3.1156114098995955, -12.222434222151247], [-3.124173720168715, -14.533739736965828], [7.734767747359909, 6.285636740207656], [-7.138227442009886, 6.270227692453355], [-5.395225379876008, -11.024790762478048], [-3.633809956835943, 5.5083734481093645], [-11.073395462313103, -1.1663242579742454], [7.074624902074825, 8.819350729932387], [13.934617598466307, 4.761856297182513], [0.27925386685813813, 7.993653585823863], [-3.1543634452835145, -12.215042543049824], [5.753798280566251, -6.692801942998173], [-2.1483754722687642, -15.188744689848878], [-7.666876197289415, -4.130861375527113], [-5.03407287976596, 8.110273353393712], [-4.9570462774054205, -8.618406168456824], [-6.93930123769212, 4.358533594809605], [-9.918827395938834, -0.6389512637519424], [-2.0949681841472474, 0.718930222405829], [-0.4220704011980053, 11.106842947733336], [-1.4183030369607281, -14.584840474223324], [0.2630465476544743, -8.1528004590429], [-2.2195997562422534, -15.239428281534117], [13.506747022321711, -1.3347292903400194], [4.96116256193548, -6.81035797474379], [-8.200995728026193, -8.551026914434017], [-2.2342256299487917, -15.245490153090019], [5.497429760734615, -6.019400244413265], [-7.661365338234572, -4.149570314562168], [-5.215772126582202, -6.354278576789704], [7.100994626719128, 0.8897576487119475], [-3.4586479987922947, -3.603568547970911], [-0.18834392835946986, 11.855144750148193], [8.70317579430114, 3.2492513302445927], [-7.867477922029315, 6.466590357708744], [9.87937139138166, 2.1161022704841663], [1.6427208082979454, 13.386936272412763], [-7.443289482083182, -7.280142656501182], [13.055310346573064, -1.3989143309745569], [6.326410514134346, 2.440479517231073], [1.5626223253167293, -11.032510498933416], [-9.39064405326907, 5.482493285266896], [-6.774204380217179, 1.8627575852415266], [-9.859879926107059, 5.458951140050983], [-3.815141148531592, -3.8026323334455663], [-5.702915524094395, 7.342889222499131], [0.5686877866453386, 11.969518879446909], [-3.471893267014123, -12.279600952507007], [-7.220908002137964, -7.194638204263702], [-8.172177252119376, 6.123378226583951], [-2.0687849990418723, -11.718680965456715], [5.516383627337457, -12.897162606400554], [5.974251120254436, -12.540688072159409], [-3.252182398438716, -12.2851238732187], [-1.504345090454669, 4.6383067552446535], [-11.34023393976883, -7.42288946271433], [-3.873038575581622, -1.5006721457267074], [5.183907218858897, -6.982776838426966], [-3.2865577339589596, -8.573883799003385], [-6.433596852119819, 1.7463316803544162], [-11.170607119679428, 7.092295186300019], [-5.985798345167941, 6.3815329811004355], [5.982317082002857, -1.5131621624991967], [7.590385505910043, 6.166716623841581], [5.995665286948711, 8.340637032200076], [13.918215988496465, 4.761157823581358], [2.6306566026431843, 9.20992893882945], [10.412919855644708, 1.6012467475221845], [8.309478639588024, 7.600899352428367], [-4.848396530497164, 8.129130968948996], [6.560923034657423, -1.1729890294512941], [4.371120125304053, -9.088463356147995], [3.126466714489998, 3.772927864311192], [7.167015409502914, -1.5557507763571847], [8.713763533654609, 4.475071445580907], [-5.28935100027962, -11.040837040216381], [-1.42647967700982, -14.585057318910815], [7.92333344018428, 3.48456646834172], [-1.4355467747054738, 7.208019488182383], [-4.4099377568880485, -3.418614509424135], [-0.12294372257754292, 11.901211291450005], [4.916567882218723, -6.508776536223346], [-6.852065598617995, 6.656012476025483], [9.38836987708756, 4.9158483554666494], [-0.5424720070298312, 10.897875702686672], [-9.189969484408513, -7.120779216244257], [-3.9149285068337654, -2.4650886591568177], [9.926550203578799, -6.229340692040948], [8.171688897311107, -10.80609539496742], [5.557756214579422, 9.266558424505439], [0.7896926425859543, -10.704752974726789], [-1.5540202558278846, 9.231867824430806], [4.128072172683088, -8.742842666611109], [-11.422154104276254, 5.023239471860592], [0.48836788418584964, 7.850251038517146], [8.989600457700785, 3.5910749612371258], [-10.215111068075041, -9.037536262859362], [-5.865860319612476, -2.979357215972594], [-11.265370788373712, 5.966137902685077], [3.522414125970239, -13.018367395797936], [-8.920820995665071, -3.6054850450362017], [-2.3973598245755197, 7.311805954904842], [-1.653710816942467, 11.091341050733918], [0.2905771767741918, -13.270103421590235], [-3.8516729480872653, 5.579522064284861], [-5.684651384450539, 6.955518569582586], [6.720985169803443, 0.6214337673267755], [5.301466326183714, -6.446821708829237], [-13.322214787292358, -3.70731749839284], [-1.4390702062269853, -14.592027532452658], [-4.702073458932197, 8.160428409482265], [6.3116680259348215, -6.288847372212669], [12.424350789357742, 3.6656465699943976], [6.863039188725628, 8.491744272215962], [7.242721225728653, 5.258067083793459], [5.17615160534442, 9.993000531723565], [6.514836970300554, -9.637521519101217], [-4.423343800533534, 8.318832729449518], [-6.911110537687643, 0.8938437949192872], [-4.932532850568996, 8.10823873623249], [4.74109239981676, -9.078844325410543], [9.122591662406462, -1.0287287601476056], [-8.225813564418706, 6.539931013439156], [-5.7480541428837935, 4.267921238132986], [-4.534712118355969, -2.6152257803510013], [-1.7415721981405388, 10.436453059286642], [-6.023418614719078, 6.784609109498126], [3.779607363293929, -2.6450118771575752], [-1.6137805676422352, 11.30797060134802], [-12.421848410031822, 1.543947011478871], [12.113667541986471, 6.2184296099758045], [5.0842588219345695, -6.148468238923174], [9.792052648742894, 0.11101492037727866], [-1.4797583045738891, 4.445237372953385], [-9.415152038410563, -0.5396492814875418], [-5.520198244933204, -3.630284481341042], [5.956281806618545, -12.529746211053173], [-2.1989999008132486, -15.218288298954185], [6.1905421008903385, 2.6711597090839225], [15.223160069094618, -5.512090217698532], [-1.9846840104982877, 8.375502659253508], [-4.9540294297864556, -0.8526600078122378], [5.1568580039631255, -10.134271173219712], [5.142982965708817, -6.886218021482505], [5.6439408956578125, -6.400591615937892], [-4.374740109927609, -1.9257292676638085], [13.888314634799396, -0.5924582526708945], [-12.907420732528545, -2.506967847176809], [-8.994190406272345, -6.033114512398679], [-8.962555719679775, -9.118610334815829], [8.568954947841283, 6.66177841627263], [-4.842579351615124, -10.16554933519015], [2.785854607407318, 5.015766534313583], [0.9693944217698962, -12.226482998254268], [-6.547906720059921, 10.67085517847542], [-10.528582717267874, 2.9852091263779816], [-0.07988832792938069, 11.673115042026662], [6.856060746036312, 6.405335963686177], [-8.460021555555807, 10.853483849963066], [-7.928750011965152, 0.6910152370449048], [-2.5291793815865335, 1.6247693288340355], [-1.3577358436824551, 11.706700032362283], [10.780222246634885, 1.6357469761674857], [15.220324863902954, -5.515869273396297], [-12.410445416632152, -3.778735130263766], [9.250311621405297, -6.654855729596579], [8.41667490442455, 1.9320045880051457], [-8.193555088132433, -2.69016663769927], [-3.2222864665129767, 10.78517310595299], [-8.750285996377679, -0.3577252312966788], [-4.185165727648709, 4.260068702919416], [5.88366703763561, -9.290468325581381], [4.316841419619275, 7.146856717810065], [4.855543382732219, 6.448839330060639], [-0.5940666666378962, 7.760315954900982], [-8.15525324015067, -10.433761575471548], [0.17170641120436345, 8.883792014067684], [6.814958764784381, 3.489158334758788], [12.152855539736425, 2.1335232733668965], [-9.776409944531238, -6.155282806741743], [-8.05374599437549, 6.28892995842513], [13.66008332736535, 4.631423103873609], [1.2430998929487826, -9.574141391845089], [-6.13106853782891, 7.1956348286482426], [-3.2595330058344656, -12.248726157706724], [13.22731728990445, -1.768914238544623], [-9.128486340782025, 1.560454254045868], [-9.192331437309722, 1.8144578146909518], [2.2718528932434356, 8.028320603550126], [2.888002436682519, 10.19743549587964], [-6.013312498753442, -0.1645164240418375], [13.915696166345226, 4.765772152696068], [1.9369320357747557, -9.29486596096833], [-2.438636626325507, -1.1462546317084852], [13.758091859573868, 4.649147698637093], [1.8486019296175709, -8.211185676435624], [7.732556244209111, 2.117796275064272], [5.783238641602565, 5.466663490468544], [-4.925502564890372, -4.321055155657129], [4.122445309457146, 9.70693764325037], [8.752129143874246, 6.358489449828919], [8.140722784828023, 9.22389325517649], [4.070928460282057, -8.939007937520358], [-11.731135386186741, 2.6211676312154712], [-8.337761950390387, -8.195767800900171], [-3.9503500483470684, -1.5756172652948726], [-2.00587049077801, 0.15680313566918272], [5.314451746839049, 1.579513740147483], [-5.425646207697813, -11.034166639346383], [10.033933440811088, 5.628058917310408], [14.307059473691913, -1.5017657000061733], [-3.12958041332649, -1.977525791066316], [-2.2098420421023337, -15.22147575101788], [-11.536756584351629, 5.878516124862865], [-7.493620268162755, -8.909906824000768], [-11.328973977783424, -7.414139397053552], [-4.617501685092901, -1.319233003671606], [-1.7384595987997962, -9.616285422260573], [-6.244328684632257, -4.739257971669029], [-5.487751113849952, -2.388900688147781], [1.0933872120298311, 7.859456549451518], [-7.58952329668113, -4.915852210218887], [-8.508848555011323, -3.042331861454137], [3.3634665492073483, 10.723428227480838], [4.779628336539369, 10.6174856479974], [-3.5978462826516484, -3.332611597753655], [0.12873743265538048, 12.211359636340484], [-10.664083682166192, 0.3555506211157833], [-4.266464485165099, -2.7841236093141273], [-6.204479304153358, 7.194874307621534], [3.180792468730995, 5.736460385222325], [8.18348576123777, 7.786154096380171], [6.4619780743553825, 3.143078892104144], [-6.914039992465257, -10.603207455471539], [-5.280843340993378, 3.4293881870711447], [-5.409721113120703, -3.1328305682420674], [6.853540692985112, 0.7130086772043848], [12.173207076922573, -3.739667470946415], [-10.738374282865731, 9.109315584801019], [13.316863946346402, -1.7398730919388314], [-7.231442612826701, 4.08818302056863], [9.505251142978956, 2.705074291672686], [-12.26048631629087, 1.5527450929242785], [-3.5192424309702224, 9.75573507402325], [-1.885738742457241, 8.125770139017462], [6.984896482876344, 5.412108740554408], [7.535568658963388, -12.40106211894096], [8.153292244391048, -10.802179757035569], [-1.9533301050969056, -11.202001938255314], [-7.186236374685793, 11.482378111152027], [1.2787995498523619, 5.072599271479204], [-3.2255877530815487, -2.994602062728024], [-3.0833948007261105, 5.549897311246674], [-1.5199993850952649, -2.893667464675612], [2.939252232906412, 6.392893710295347], [1.015389185171945, 4.974996789191783], [-12.125639722246678, 1.1723951632403784], [3.8828819442147635, -11.955969451879733], [-11.293337102686232, -7.357801212011153], [1.4775349788987966, 7.032131322305244], [4.751549817771654, 10.62288769017103], [-3.29066905181777, -12.225520441228046], [-3.2695562118309636, 6.385305095855594], [-9.267437625569649, -7.336573897531918], [-7.146785329637891, 11.344795636352979], [1.246224264578295, 9.355398898280214], [-13.328813755050609, -3.0779007150102338], [9.803243436922005, 5.595332815873618], [4.339840962023357, -9.022701636760189], [-4.392568278563389, -5.922791012362278], [9.875790990377823, -5.056454002473141], [-2.889026051999338, 12.176199568284838], [-9.159907948763678, -2.3353186704128905], [-6.636898513443478, 1.8285734266563165], [3.8420880352834184, -6.869588472956859], [-5.711318809714862, 7.095052298588258], [5.386330520738454, 7.089430838724529], [-3.3775901026306907, -2.7403099961005637], [-12.336166573228578, -4.54254358657389], [13.916354607535817, 4.7638782001923765], [-5.867974564100238, 3.7936526339845713], [7.827770208495308, 7.808766977493467], [6.551042708815454, -7.352833383016251], [-8.282244449342544, -1.5488653013340703], [1.3513132838579556, 6.542686628727576], [5.012341267726815, 3.335400784197255], [1.5585631478925852, 9.054178760914844], [3.3381063680853664, 7.533584533891047], [-7.388064494218034, 7.661735655133439], [-8.966715125646207, 1.403851194156259], [-12.260335075393314, -4.170685018978582], [-4.4577362221383385, -2.505381395280374], [-1.034455104140975, 8.112665233227126], [4.173339034444273, 6.716141417324061], [-7.645229220244572, 6.467504475214934], [-12.247960481330201, 2.1330821025111324], [13.915335286386915, 4.770276459637884], [-6.111801311913414, -10.700936952912222], [-8.051166620428798, 6.356083981982525], [7.508736186380432, 7.904543517429075], [-3.194643995796129, -12.231954227668274], [5.25019710792089, 7.24835951666805], [-3.3342809843647885, -12.25239918052111], [-8.36648332317541, 10.133211039923825], [-11.981557479784058, -4.07449085156721], [-4.329923967721768, -1.7182837427681041], [0.9734182034733058, 3.252258019237875], [-13.019300145453762, 2.017057716103325], [0.19229827864573162, 12.148753799273164], [-5.846555082638568, 6.234820281290875], [0.1733630181248346, 8.772346084881407], [1.1859614172611512, -8.018920247392897], [13.957859423686344, -2.7544683348971355], [5.834363749709343, 3.3940943783038184], [0.49362555870989433, 9.765808438033352], [-11.314857834085222, -7.405339471638212], [7.307611712664904, 0.9155536370259291], [4.335325772416614, -6.0651351945641085], [4.1966797075833675, -10.054707177470178], [-0.958282586271381, 6.49707163455318], [-12.075875170031143, -3.5757229478682535], [-9.986491096598163, -2.4284884552210046], [8.485842986372607, 1.3808982448934493], [4.468974841029809, 8.955904587762546], [-5.179946598609937, 9.296980801752733], [4.896838518990785, 8.153772975791682], [5.502640666457967, -0.7994612957562626], [-3.876570276079939, 6.222876996422032], [-1.6334435271775738, 6.3187085975765305], [-0.43592792752964465, 11.697427774286153], [-2.1922065430183073, 8.10489117212735], [-3.8618288997971484, -7.72419293170287], [6.90150074443438, 5.431433306209803], [10.625098668003286, -4.422774512548975], [-2.534673429825065, 0.6485925802817538], [-5.0146168407355685, -10.877313865210741], [5.842880437272215, 4.80205816785489], [-2.1901877921671096, -15.218203611069248], [11.230361959967299, 1.2355681662314453], [5.281053464855597, -8.898533565177326], [7.521769510838662, -12.39411953692738], [-7.082254709188155, -5.670363639615193], [3.147652303275819, 12.84072105143929], [-7.028000035111452, 0.7711688268755114], [5.9304369718439975, -8.110323952899442], [-12.619930079358841, -4.113399059581858], [6.01172231781453, 2.5180211512337274], [-7.614808269852853, 0.32008231915535257], [7.620706192112162, -12.405862567992013], [0.7553017472323248, -8.563183899546551], [-1.6976122833220084, -14.885670969742044], [-3.74864584316625, -6.740936462808057], [5.78960824502848, -1.793052217537389], [-5.112405227523367, 4.162662000525701], [-3.773006818070283, 5.32285748896222], [-4.251449796200577, -9.124881991257352], [4.32209257344125, -8.896550523605562], [-13.327235958770808, 0.9459750191234055], [9.316545058486055, 3.9997292208267767], [4.437119001195094, 10.101759216927467], [5.920455103248595, -7.791101988031239], [-3.289614768820118, 6.6982113214621055], [-1.4301438078859507, 8.926709483678636], [-9.034222964945798, -9.31331473475792], [-9.260428516210261, 5.109812546242018], [-9.994119411727652, 7.87334041746346], [-7.787065919262201, 6.254317488906279], [-9.315553338236843, 8.459630607805734], [7.0161816281315526, -2.102934284199215], [-4.275406889122285, 7.243245016304494], [7.054480110799861, -8.827021816268623], [7.843132295101665, 0.4750934719560204], [3.0731082423081446, 7.675049616546453], [7.23216234058352, -6.5793852665691155], [-10.859084776247803, -0.10504057133953593], [-13.193539861753662, 5.4454215137159805], [-11.465233629789536, 0.574324559596368], [6.061410574409012, -2.715546072241345], [6.817276129047788, -0.470352801469562], [-4.475492651176828, -1.1166918506749053], [-4.601512216847428, -7.533236668802977], [-7.1152264268237815, 1.1997122050520437], [-10.231290541538304, 3.640699232212779], [-12.057631903514501, 1.1743812295038294], [10.4575973416176, 3.368967411566342], [0.2820638447180123, -13.217236009096464], [5.225019532839203, -9.662167261773728], [-8.190508434699867, -3.342078489563604], [-5.2481904937626105, 6.616082988949221], [-8.458726630052112, 5.359641368374514], [-6.680885132975456, -6.676421580518651], [6.302399511917023, 1.195961090130331], [-9.451271145332587, -5.254862099080876], [-2.8876617468255232, 7.7360419701577365], [-7.4319972928250415, 1.6728296613418272], [8.55558839277116, 3.5642025977140346], [-8.949294444239609, -3.909696890593712], [-0.12821701586919312, -9.285609834976647], [7.361684048483804, 6.123748735780253], [-1.2795701676186437, 11.600643941868572], [2.4543973150871765, 5.76509592342997], [-3.8113659367114026, 1.1425442105338328], [-8.566923428956176, -4.239410702579881], [-2.9819439776833985, 6.958446682552351], [-4.9662854545125725, 2.7902344006802173], [6.469062616351551, 7.756190071538844], [-11.325554602695412, -7.408974556162495], [-4.117928133911796, -1.4580976909540944], [-3.4353567286762057, 0.23361523633895015], [-2.747075052645658, -8.180404628861531], [6.542621366255626, -1.315787994436245], [7.208379848518947, -7.193072129333574], [-6.698909119650492, -4.919420812363325], [-1.1115590069682648, -9.192696632654567], [-0.979389461159814, -3.385653544350394], [10.781364912779447, 1.400555606226705], [-3.643438930842627, -7.614768531144896], [-3.3922086085591947, -5.363131899594515], [5.347659078074252, -7.241049741359242], [11.359075997328882, -3.881737845643038], [-0.7196508021082505, 12.063795149716126], [-2.8220935604163153, -11.19697636269803], [2.6401010124045157, -8.688973337940297], [-2.749291175796914, 0.14857940313495283], [3.6624329603967447, -3.2964047450773286], [-11.397682528051437, 4.801936157409642], [1.8249903341732683, -10.272991933186658], [-8.887650810106138, 6.086831352507889], [0.8455226954068902, 2.3715664703898263], [-8.267495822674668, 9.5834331985322], [-3.1313098961010932, 6.7453038441571485], [11.023449179178861, 6.871893680720533], [4.2935270166550765, 0.2896897492377619], [4.377613635282869, 8.315574141633695]]}, \"id\": \"el16248140525789366800\"});\n",
+        "            })\n",
+        "         });\n",
+        "}\n",
+        "</script>"
+       ],
+       "metadata": {},
+       "output_type": "display_data",
+       "png": "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\nAAAASUVORK5CYII=\n",
+       "text": [
+        "<matplotlib.figure.Figure at 0x7fceb5c1ca10>"
+       ]
+      }
+     ],
+     "prompt_number": 11
+    }
+   ],
+   "metadata": {}
+  }
+ ]
+}
\ No newline at end of file
diff --git a/examples/ptb/train_ptb.sh b/examples/ptb/train_ptb.sh
new file mode 100755
index 0000000..9833ea7
--- /dev/null
+++ b/examples/ptb/train_ptb.sh
@@ -0,0 +1,5 @@
+#!/usr/bin/env sh
+
+TOOLS=./build/tools
+
+$TOOLS/caffe train --solver=examples/ptb/solver.prototxt
diff --git a/include/caffe/common_layers.hpp b/include/caffe/common_layers.hpp
index b1ac3a9..aff74c4 100644
--- a/include/caffe/common_layers.hpp
+++ b/include/caffe/common_layers.hpp
@@ -137,10 +137,13 @@ class ConcatLayer : public Layer<Dtype> {
   virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,
       const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
 
+  Blob<Dtype> col_bob_;
+  Blob<Dtype> top_buffer_;
   int count_;
   int num_concats_;
   int concat_input_size_;
   int concat_axis_;
+  bool fast_lstm_concat_;
 };
 
 /**
@@ -456,6 +459,7 @@ class SliceLayer : public Layer<Dtype> {
   int num_slices_;
   int slice_size_;
   int slice_axis_;
+  bool fast_wordvec_slice_;
   vector<int> slice_point_;
 };
 
diff --git a/include/caffe/net.hpp b/include/caffe/net.hpp
index 075afeb..53cdba6 100644
--- a/include/caffe/net.hpp
+++ b/include/caffe/net.hpp
@@ -237,9 +237,12 @@ class Net {
   vector<Dtype> blob_loss_weights_;
   vector<vector<int> > param_id_vecs_;
   vector<int> param_owners_;
+  vector<bool> shared_param_owners_;
   vector<string> param_display_names_;
   vector<pair<int, int> > param_layer_indices_;
   map<string, int> param_names_index_;
+  /// map of param owners id to master_diff id
+  map<int, int> master_diffs_index_;
   /// blob indices for the input and the output of the net
   vector<int> net_input_blob_indices_;
   vector<int> net_output_blob_indices_;
@@ -247,6 +250,8 @@ class Net {
   vector<Blob<Dtype>*> net_output_blobs_;
   /// The parameters in the network.
   vector<shared_ptr<Blob<Dtype> > > params_;
+  /// The master diffs for shared parameters
+  vector<shared_ptr<Blob<Dtype> > > master_diffs_;
   /// the learning rate multipliers
   vector<float> params_lr_;
   /// the weight decay multipliers
diff --git a/include/caffe/test/test_gradient_check_util.hpp b/include/caffe/test/test_gradient_check_util.hpp
index 2293771..fad2e28 100644
--- a/include/caffe/test/test_gradient_check_util.hpp
+++ b/include/caffe/test/test_gradient_check_util.hpp
@@ -86,7 +86,8 @@ void GradientChecker<Dtype>::CheckGradientSingle(Layer<Dtype>* layer,
   for (int i = 0; i < layer->blobs().size(); ++i) {
     blobs_to_check.push_back(layer->blobs()[i].get());
   }
-  if (check_bottom < 0) {
+  if (check_bottom == -2) {
+  } else if (check_bottom < 0) {
     for (int i = 0; i < bottom.size(); ++i) {
       blobs_to_check.push_back(bottom[i]);
     }
diff --git a/include/caffe/util/math_functions.hpp b/include/caffe/util/math_functions.hpp
index f43036f..c13f8ea 100644
--- a/include/caffe/util/math_functions.hpp
+++ b/include/caffe/util/math_functions.hpp
@@ -14,6 +14,9 @@ namespace caffe {
 
 // Caffe gemm provides a simpler interface to the gemm functions, with the
 // limitation that the data has to be contiguous in memory.
+template<typename Dtype>
+void caffe_gpu_transpose(const int M, const int N, const Dtype* A, Dtype* C);
+
 template <typename Dtype>
 void caffe_cpu_gemm(const CBLAS_TRANSPOSE TransA,
     const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K,
diff --git a/include/caffe/vision_layers.hpp b/include/caffe/vision_layers.hpp
index 6cb507a..940c7a0 100644
--- a/include/caffe/vision_layers.hpp
+++ b/include/caffe/vision_layers.hpp
@@ -451,6 +451,67 @@ class CuDNNPoolingLayer : public PoolingLayer<Dtype> {
 };
 #endif
 
+template <typename Dtype>
+class LstmLayer : public Layer<Dtype> {
+ public:
+  explicit LstmLayer(const LayerParameter& param)
+      : Layer<Dtype>(param) {}
+  virtual void LayerSetUp(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+
+  virtual inline const char* type() const { return "Lstm"; }
+ protected:
+  virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Forward_gpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
+  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
+
+  int channels_;  // num memory cells;
+  int num_;  // batch size;
+  int input_data_size_;
+  int M_;
+  int N_;
+  int K_;
+  Blob<Dtype> gates_data_buffer_;
+  Blob<Dtype> gates_diff_buffer_;
+  Blob<Dtype> next_state_tot_diff_buffer_;
+  Blob<Dtype> dldg_buffer_;
+};
+
+
+template <typename Dtype>
+class WordvecLayer : public Layer<Dtype> {
+ public:
+  explicit WordvecLayer(const LayerParameter& param)
+      : Layer<Dtype>(param) {}
+  virtual void LayerSetUp(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+
+  virtual inline const char* type() const { return "Wordvec"; }
+ protected:
+  virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Forward_gpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
+  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
+
+  int num_;  // batch size;
+  int vocab_size_;
+  int dimension_;
+  int sentence_length_;
+};
+
 }  // namespace caffe
 
 #endif  // CAFFE_VISION_LAYERS_HPP_
diff --git a/python/caffe/classifier.py b/python/caffe/classifier.py
index 49f8003..09293b4 100644
--- a/python/caffe/classifier.py
+++ b/python/caffe/classifier.py
@@ -91,3 +91,6 @@ class Classifier(caffe.Net):
             predictions = predictions.mean(1)
 
         return predictions
+ 
+    def rff(self, inputs):
+        out = self.forward_all(**{self.inputs[0]: inputs})
diff --git a/src/caffe/layers/concat_layer.cpp b/src/caffe/layers/concat_layer.cpp
index 1cac8fc..35e152c 100644
--- a/src/caffe/layers/concat_layer.cpp
+++ b/src/caffe/layers/concat_layer.cpp
@@ -12,6 +12,7 @@ void ConcatLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,
   const ConcatParameter& concat_param = this->layer_param_.concat_param();
   CHECK(!(concat_param.has_axis() && concat_param.has_concat_dim()))
       << "Either axis or concat_dim should be specified; not both.";
+  fast_lstm_concat_ = this->layer_param_.concat_param().fast_lstm_concat();
 }
 
 template <typename Dtype>
@@ -47,6 +48,12 @@ void ConcatLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
     top_shape[concat_axis_] += bottom[i]->shape(concat_axis_);
   }
   top[0]->Reshape(top_shape);
+  if (fast_lstm_concat_) {
+    top_buffer_.Reshape( top[0]->num(),
+        top[0]->channels(),
+        top[0]->height(),
+        top[0]->width());
+  }
   CHECK_EQ(bottom_count_sum, top[0]->count());
 }
 
diff --git a/src/caffe/layers/concat_layer.cu b/src/caffe/layers/concat_layer.cu
index dbadb5a..2f16ece 100644
--- a/src/caffe/layers/concat_layer.cu
+++ b/src/caffe/layers/concat_layer.cu
@@ -10,18 +10,38 @@ template <typename Dtype>
 void ConcatLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
       const vector<Blob<Dtype>*>& top) {
   Dtype* top_data = top[0]->mutable_gpu_data();
-  int offset_concat_axis = 0;
-  const int top_concat_axis = top[0]->shape(concat_axis_);
-  for (int i = 0; i < bottom.size(); ++i) {
-    const Dtype* bottom_data = bottom[i]->gpu_data();
-    const int bottom_concat_axis = bottom[i]->shape(concat_axis_);
-    for (int n = 0; n < num_concats_; ++n) {
-      caffe_copy(bottom_concat_axis * concat_input_size_,
-          bottom_data + n * bottom_concat_axis * concat_input_size_,
-          top_data + (n * top_concat_axis + offset_concat_axis)
-              * concat_input_size_);
+  if (fast_lstm_concat_) {
+    int height_ = top[0]->height();
+    int num_ = top[0]->num();
+    int channels_ = top[0]->channels();
+    int width_ = top[0]->width();
+    CHECK_EQ(concat_axis_, 1) << "Lstm concat must be along channel dimension.";
+    int offset_channel = 0;
+    Dtype* top_buffer_data = top_buffer_.mutable_gpu_data();
+    for (int i = 0; i < bottom.size(); ++i) {
+      const Dtype* bottom_data = bottom[i]->gpu_data();
+      int num_elem =
+        bottom[i]->channels() * height_ * width_;
+      int top_offset = num_ * height_ * width_ * offset_channel;
+      caffe_gpu_transpose(num_, num_elem, bottom_data, top_buffer_data + top_offset);
+      offset_channel += bottom[i]->channels();
+    }
+    int total_num_elem = height_ * width_ * offset_channel;
+    caffe_gpu_transpose(total_num_elem, num_, top_buffer_data, top_data);
+  } else {
+    int offset_concat_axis = 0;
+    const int top_concat_axis = top[0]->shape(concat_axis_);
+    for (int i = 0; i < bottom.size(); ++i) {
+      const Dtype* bottom_data = bottom[i]->gpu_data();
+      const int bottom_concat_axis = bottom[i]->shape(concat_axis_);
+      for (int n = 0; n < num_concats_; ++n) {
+        caffe_copy(bottom_concat_axis * concat_input_size_,
+            bottom_data + n * bottom_concat_axis * concat_input_size_,
+            top_data + (n * top_concat_axis + offset_concat_axis)
+                * concat_input_size_);
+      }
+      offset_concat_axis += bottom_concat_axis;
     }
-    offset_concat_axis += bottom_concat_axis;
   }
 }
 
@@ -29,18 +49,39 @@ template <typename Dtype>
 void ConcatLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
       const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
   const Dtype* top_diff = top[0]->gpu_diff();
-  int offset_concat_axis = 0;
-  const int top_concat_axis = top[0]->shape(concat_axis_);
-  for (int i = 0; i < bottom.size(); ++i) {
-    if (!propagate_down[i]) { continue; }
-    Dtype* bottom_diff = bottom[i]->mutable_gpu_diff();
-    const int bottom_concat_axis = bottom[i]->shape(concat_axis_);
-    for (int n = 0; n < num_concats_; ++n) {
-      caffe_copy(bottom_concat_axis * concat_input_size_, top_diff +
-          (n * top_concat_axis + offset_concat_axis) * concat_input_size_,
-          bottom_diff + n * bottom_concat_axis * concat_input_size_);
+  if (fast_lstm_concat_) {
+    int height_ = top[0]->height();
+    int num_ = top[0]->num();
+    int channels_ = top[0]->channels();
+    int width_ = top[0]->width();
+    CHECK_EQ(concat_axis_, 1) << "Lstm concat must be along channel dimension.";
+    int offset_channel = 0;
+    Dtype* top_buffer_diff = top_buffer_.mutable_gpu_diff();
+    int total_num_elem = height_ * width_ * channels_;
+    caffe_gpu_transpose(num_, total_num_elem, top_diff, top_buffer_diff);
+    for (int i = 0; i < bottom.size(); ++i) {
+      if (propagate_down[i]) {
+        Dtype* bottom_diff = bottom[i]->mutable_gpu_diff();
+        int top_offset = num_ * height_ * width_ * offset_channel;
+        int num_elem = bottom[i]->channels() * height_ * width_;
+        caffe_gpu_transpose(num_elem, num_, top_buffer_diff + top_offset, bottom_diff);
+      }
+      offset_channel += bottom[i]->channels();
+    }
+  } else {
+    int offset_concat_axis = 0;
+    const int top_concat_axis = top[0]->shape(concat_axis_);
+    for (int i = 0; i < bottom.size(); ++i) {
+      if (!propagate_down[i]) { continue; }
+      Dtype* bottom_diff = bottom[i]->mutable_gpu_diff();
+      const int bottom_concat_axis = bottom[i]->shape(concat_axis_);
+      for (int n = 0; n < num_concats_; ++n) {
+        caffe_copy(bottom_concat_axis * concat_input_size_, top_diff +
+            (n * top_concat_axis + offset_concat_axis) * concat_input_size_,
+            bottom_diff + n * bottom_concat_axis * concat_input_size_);
+      }
+      offset_concat_axis += bottom_concat_axis;
     }
-    offset_concat_axis += bottom_concat_axis;
   }
 }
 
diff --git a/src/caffe/layers/lstm_layer.cpp b/src/caffe/layers/lstm_layer.cpp
new file mode 100644
index 0000000..6610cbb
--- /dev/null
+++ b/src/caffe/layers/lstm_layer.cpp
@@ -0,0 +1,248 @@
+#include <vector>
+#include "caffe/layer.hpp"
+#include "caffe/util/math_functions.hpp"
+#include "caffe/vision_layers.hpp"
+
+namespace caffe {
+
+template <typename Dtype>
+inline Dtype sigmoid(Dtype x) {
+  return 1. / (1. + exp(-x));
+}
+
+template <typename Dtype>
+inline Dtype sigmoid_diff(Dtype x) {
+  return x * (1. - x);
+}
+
+template <typename Dtype>
+inline Dtype tanh(Dtype x) {
+  Dtype exp2x = exp(2 * x);
+  return abs(x) < Dtype(5) ? ((exp2x - Dtype(1)) / (exp2x + Dtype(1))) : (x > 0 ? Dtype(1) : Dtype(-1));
+}
+
+template <typename Dtype>
+inline Dtype tanh_diff(Dtype x) {
+  return (1. - x * x);
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  LstmParameter lstm_param = this->layer_param_.lstm_param();
+  CHECK((lstm_param.has_num_cells()))
+      << "lstm_param.has_num_cells()";
+  CHECK((lstm_param.has_input_weight_filler()))
+      << "lstm_param.has_input_weight_filler()";
+  CHECK((lstm_param.has_input_gate_weight_filler()))
+      << "lstm_param.has_input_gate_weight_filler()";
+  CHECK((lstm_param.has_forget_gate_weight_filler()))
+      << "lstm_param.has_forget_gate_weight_filler()";
+  CHECK((lstm_param.has_output_gate_weight_filler()))
+      << "lstm_param.has_output_gate_weight_filler()";
+
+  channels_ = lstm_param.num_cells();
+  input_data_size_ = (bottom[0]->channels() *
+        bottom[0]->width() *
+        bottom[0]->height());
+  num_ = bottom[0]->num();
+  M_ = num_;
+  N_ = channels_;
+  K_ = input_data_size_;
+
+  this->blobs_.resize(4);
+  for (int i = 0; i < 4; i++) {
+      this->blobs_[i].reset(new Blob<Dtype>(
+          1, channels_, 1, input_data_size_));
+  }
+
+  shared_ptr<Filler<Dtype> > input_weight_filler(GetFiller<Dtype>(
+      lstm_param.input_weight_filler()));
+  input_weight_filler->Fill(this->blobs_[0].get());
+
+  shared_ptr<Filler<Dtype> > input_gate_weight_filler(GetFiller<Dtype>(
+      lstm_param.input_gate_weight_filler()));
+  input_gate_weight_filler->Fill(this->blobs_[1].get());
+
+  shared_ptr<Filler<Dtype> > forget_gate_weight_filler(GetFiller<Dtype>(
+      lstm_param.forget_gate_weight_filler()));
+  forget_gate_weight_filler->Fill(this->blobs_[2].get());
+
+  shared_ptr<Filler<Dtype> > output_gate_weight_filler(GetFiller<Dtype>(
+      lstm_param.output_gate_weight_filler()));
+  output_gate_weight_filler->Fill(this->blobs_[3].get());
+
+  // Propagate gradients to the parameters (as directed by backward pass).
+  this->param_propagate_down_.resize(this->blobs_.size(), true);
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  CHECK((this->layer_param_.bottom_size() == 2 || this->layer_param_.bottom_size() == 0))
+      << "LSTM must have a data and cell bottom";
+  CHECK((this->layer_param_.top_size() == 2 || this->layer_param_.top_size() == 0))
+      << "LSTM must have a data and cell top";
+  gates_data_buffer_.Reshape(num_, 4 * channels_, 1, 1);
+  gates_diff_buffer_.Reshape(num_, 4 * channels_, 1, 1);
+  next_state_tot_diff_buffer_.Reshape(num_, channels_, 1, 1);
+  dldg_buffer_.Reshape(num_, channels_, 1, 1);
+  top[0]->Reshape(num_, channels_, 1, 1);
+  top[1]->Reshape(num_, channels_, 1, 1);
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  const Dtype* input_data = bottom[0]->cpu_data();
+  const Dtype* prev_state_data = bottom[1]->cpu_data();
+
+  const Dtype* input_weight = this->blobs_[0]->cpu_data();
+  const Dtype* input_gate_weight = this->blobs_[1]->cpu_data();
+  const Dtype* forget_gate_weight = this->blobs_[2]->cpu_data();
+  const Dtype* output_gate_weight = this->blobs_[3]->cpu_data();
+
+  Dtype* next_hidden_state = top[0]->mutable_cpu_data();
+  Dtype* next_memory_state = top[1]->mutable_cpu_data();
+
+  Dtype* gates_data = gates_data_buffer_.mutable_cpu_data();
+
+  Dtype* input_gates = gates_data + channels_ * num_ * 0;
+  Dtype* forget_gates = gates_data + channels_ * num_ * 1;
+  Dtype* output_gates = gates_data + channels_ * num_ * 2;
+  Dtype* input_values = gates_data + channels_ * num_ * 3;
+
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, input_weight,
+    (Dtype)0., input_values);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, input_gate_weight,
+    (Dtype)0., input_gates);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, forget_gate_weight,
+    (Dtype)0., forget_gates);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, output_gate_weight,
+    (Dtype)0., output_gates);
+
+  for (int n = 0; n < num_; ++n) {
+    for (int i = 0; i < channels_; ++i) {
+      const int idx = i + n * channels_;
+      input_gates[idx] = sigmoid(input_gates[idx]);
+      forget_gates[idx] = sigmoid(forget_gates[idx]);
+      output_gates[idx] = sigmoid(output_gates[idx]);
+      input_values[idx] = tanh(input_values[idx]);
+
+      next_memory_state[idx] = prev_state_data[idx] * forget_gates[idx] +
+          input_gates[idx] * input_values[idx];
+      next_hidden_state[idx] = next_memory_state[idx] * output_gates[idx];
+    }
+  }
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
+  for (int i = 0; i < 2; ++i) {
+    caffe_set(bottom[i]->count(), Dtype(0), bottom[i]->mutable_cpu_diff());
+  }
+  for (int i = 0; i < 4; ++i) {
+    caffe_set(this->blobs_[i]->count(), Dtype(0), this->blobs_[i]->mutable_cpu_diff());
+  }
+
+  const Dtype* input_data = bottom[0]->cpu_data();
+  const Dtype* prev_state_data = bottom[1]->cpu_data();
+
+  const Dtype* input_weight = this->blobs_[0]->cpu_data();
+  const Dtype* input_gate_weight = this->blobs_[1]->cpu_data();
+  const Dtype* forget_gate_weight = this->blobs_[2]->cpu_data();
+  const Dtype* output_gate_weight = this->blobs_[3]->cpu_data();
+
+  const Dtype* gates_data = gates_data_buffer_.mutable_cpu_data();
+  Dtype* gates_diff = gates_diff_buffer_.mutable_cpu_data();
+
+  const Dtype* input_gates = gates_data + channels_ * num_ * 0;
+  const Dtype* forget_gates = gates_data + channels_ * num_ * 1;
+  const Dtype* output_gates = gates_data + channels_ * num_ * 2;
+  const Dtype* input_values = gates_data + channels_ * num_ * 3;
+
+  Dtype* input_gates_diff = gates_diff + channels_ * num_ * 0;
+  Dtype* forget_gates_diff = gates_diff + channels_ * num_ * 1;
+  Dtype* output_gates_diff = gates_diff + channels_ * num_ * 2;
+  Dtype* input_values_diff = gates_diff + channels_ * num_ * 3;
+
+  for (int n = 0; n < num_; ++n) {
+    for (int i = 0; i < channels_; ++i) {
+      const int idx = i + n * channels_;
+      input_gates_diff[idx] = sigmoid_diff(input_gates[idx]);
+      forget_gates_diff[idx] = sigmoid_diff(forget_gates[idx]);
+      output_gates_diff[idx] = sigmoid_diff(output_gates[idx]);
+      input_values_diff[idx] = tanh_diff(input_values[idx]);
+    }
+  }
+
+  Dtype* input_weight_diff = this->blobs_[0]->mutable_cpu_diff();
+  Dtype* input_gate_weight_diff = this->blobs_[1]->mutable_cpu_diff();
+  Dtype* forget_gate_weight_diff = this->blobs_[2]->mutable_cpu_diff();
+  Dtype* output_gate_weight_diff = this->blobs_[3]->mutable_cpu_diff();
+
+  Dtype* input_diff = bottom[0]->mutable_cpu_diff();
+  Dtype* prev_state_diff = bottom[1]->mutable_cpu_diff();
+
+  const Dtype* next_hidden_state_diff = top[0]->cpu_diff();
+  const Dtype* next_memory_state = top[1]->cpu_data();
+  const Dtype* next_memory_state_diff = top[1]->cpu_diff();
+
+  Dtype* next_state_tot_diff = next_state_tot_diff_buffer_.mutable_cpu_data();
+  caffe_mul(num_ * channels_, output_gates, next_hidden_state_diff, next_state_tot_diff);
+  caffe_add(num_ * channels_, next_memory_state_diff, next_state_tot_diff, next_state_tot_diff);
+
+  caffe_mul(num_ * channels_, next_state_tot_diff, forget_gates, prev_state_diff);
+
+  Dtype* dldg_data = dldg_buffer_.mutable_cpu_data();
+
+  caffe_mul(num_ * channels_, input_gates, input_values_diff, dldg_data);
+  caffe_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_cpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., input_weight_diff);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, input_weight,
+    (Dtype)1., input_diff);
+
+  caffe_mul(num_ * channels_, input_gates_diff, input_values, dldg_data);
+  caffe_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_cpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., input_gate_weight_diff);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, input_gate_weight,
+    (Dtype)1., input_diff);
+
+  caffe_mul(num_ * channels_, forget_gates_diff, prev_state_data, dldg_data);
+  caffe_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_cpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., forget_gate_weight_diff);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, forget_gate_weight,
+    (Dtype)1., input_diff);
+
+  caffe_mul(num_ * channels_, output_gates_diff, next_memory_state, dldg_data);
+  caffe_mul(num_ * channels_, next_hidden_state_diff, dldg_data, dldg_data);
+  caffe_cpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., output_gate_weight_diff);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, output_gate_weight,
+    (Dtype)1., input_diff);
+}
+
+#ifdef CPU_ONLY
+STUB_GPU(LstmLayer);
+#endif
+
+INSTANTIATE_CLASS(LstmLayer);
+REGISTER_LAYER_CLASS(Lstm);
+
+}  // namespace caffe
diff --git a/src/caffe/layers/lstm_layer.cu b/src/caffe/layers/lstm_layer.cu
new file mode 100644
index 0000000..ee9db96
--- /dev/null
+++ b/src/caffe/layers/lstm_layer.cu
@@ -0,0 +1,227 @@
+#include <vector>
+#include "caffe/layer.hpp"
+#include "caffe/util/math_functions.hpp"
+#include "caffe/vision_layers.hpp"
+
+namespace caffe {
+
+template <typename Dtype>
+__device__ Dtype cuda_sigmoid(Dtype x) {
+  return 1. / (1. + exp(-x));
+}
+
+template <typename Dtype>
+__device__ Dtype cuda_sigmoid_diff(Dtype x) {
+  return x * (1. - x);
+}
+
+template <typename Dtype>
+__device__ Dtype cuda_tanh(Dtype x) {
+  Dtype exp2x = exp(2 * x);
+  return abs(x) < Dtype(5) ? ((exp2x - Dtype(1)) / (exp2x + Dtype(1))) : (x > 0 ? Dtype(1) : Dtype(-1));
+}
+
+template <typename Dtype>
+__device__ Dtype cuda_tanh_diff(Dtype x) {
+  return (1. - x * x);
+}
+
+template <typename Dtype>
+__global__ void ForwardCombineGates(
+  int n,
+  const Dtype* prev_state_data,
+  Dtype* input_gates,
+  Dtype* forget_gates,
+  Dtype* output_gates,
+  Dtype* input_values,
+  Dtype* next_memory_state,
+  Dtype* next_hidden_state)
+{
+  CUDA_KERNEL_LOOP(idx, n) {
+    input_gates[idx] = cuda_sigmoid(input_gates[idx]);
+    forget_gates[idx] = cuda_sigmoid(forget_gates[idx]);
+    output_gates[idx] = cuda_sigmoid(output_gates[idx]);
+    input_values[idx] = cuda_tanh(input_values[idx]);
+
+    next_memory_state[idx] = prev_state_data[idx] * forget_gates[idx] +
+        input_gates[idx] * input_values[idx];
+    next_hidden_state[idx] = next_memory_state[idx] * output_gates[idx];
+  }
+}
+
+template <typename Dtype>
+__global__ void BackwardGates(
+  int n,
+  const Dtype* input_gates,
+  const Dtype* forget_gates,
+  const Dtype* output_gates,
+  const Dtype* input_values,
+  Dtype* input_gates_diff,
+  Dtype* forget_gates_diff,
+  Dtype* output_gates_diff,
+  Dtype* input_values_diff)
+{
+  CUDA_KERNEL_LOOP(idx, n) {
+    input_gates_diff[idx] = cuda_sigmoid_diff(input_gates[idx]);
+    forget_gates_diff[idx] = cuda_sigmoid_diff(forget_gates[idx]);
+    output_gates_diff[idx] = cuda_sigmoid_diff(output_gates[idx]);
+    input_values_diff[idx] = cuda_tanh_diff(input_values[idx]);
+  }
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  const Dtype* input_data = bottom[0]->gpu_data();
+  const Dtype* prev_state_data = bottom[1]->gpu_data();
+
+  const Dtype* input_weight = this->blobs_[0]->gpu_data();
+  const Dtype* input_gate_weight = this->blobs_[1]->gpu_data();
+  const Dtype* forget_gate_weight = this->blobs_[2]->gpu_data();
+  const Dtype* output_gate_weight = this->blobs_[3]->gpu_data();
+
+  Dtype* next_hidden_state = top[0]->mutable_gpu_data();
+  Dtype* next_memory_state = top[1]->mutable_gpu_data();
+
+  Dtype* gates_data = gates_data_buffer_.mutable_gpu_data();
+
+  Dtype* input_gates = gates_data + channels_ * num_ * 0;
+  Dtype* forget_gates = gates_data + channels_ * num_ * 1;
+  Dtype* output_gates = gates_data + channels_ * num_ * 2;
+  Dtype* input_values = gates_data + channels_ * num_ * 3;
+
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, input_weight,
+    (Dtype)0., input_values);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, input_gate_weight,
+    (Dtype)0., input_gates);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, forget_gate_weight,
+    (Dtype)0., forget_gates);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, output_gate_weight,
+    (Dtype)0., output_gates);
+
+  caffe_gpu_set(channels_ * num_, Dtype(0), forget_gates);
+  caffe_gpu_sub(channels_ * num_, forget_gates, output_gates, forget_gates);
+
+  const int count = num_ * channels_;
+  ForwardCombineGates<Dtype><<<CAFFE_GET_BLOCKS(count), CAFFE_CUDA_NUM_THREADS>>>(
+      count,
+      prev_state_data,
+      input_gates,
+      forget_gates,
+      output_gates,
+      input_values,
+      next_memory_state,
+      next_hidden_state);
+
+  CUDA_POST_KERNEL_CHECK;
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
+  for (int i = 0; i < 2; ++i) {
+    caffe_gpu_set(bottom[i]->count(), Dtype(0), bottom[i]->mutable_gpu_diff());
+  }
+  for (int i = 0; i < 4; ++i) {
+    caffe_gpu_set(this->blobs_[i]->count(), Dtype(0), this->blobs_[i]->mutable_gpu_diff());
+  }
+
+  const Dtype* input_data = bottom[0]->gpu_data();
+  const Dtype* prev_state_data = bottom[1]->gpu_data();
+
+  const Dtype* input_weight = this->blobs_[0]->gpu_data();
+  const Dtype* input_gate_weight = this->blobs_[1]->gpu_data();
+  const Dtype* forget_gate_weight = this->blobs_[2]->gpu_data();
+  const Dtype* output_gate_weight = this->blobs_[3]->gpu_data();
+
+  const Dtype* gates_data = gates_data_buffer_.mutable_gpu_data();
+  Dtype* gates_diff = gates_diff_buffer_.mutable_gpu_data();
+
+  const Dtype* input_gates = gates_data + channels_ * num_ * 0;
+  const Dtype* forget_gates = gates_data + channels_ * num_ * 1;
+  const Dtype* output_gates = gates_data + channels_ * num_ * 2;
+  const Dtype* input_values = gates_data + channels_ * num_ * 3;
+
+  Dtype* input_gates_diff = gates_diff + channels_ * num_ * 0;
+  Dtype* forget_gates_diff = gates_diff + channels_ * num_ * 1;
+  Dtype* output_gates_diff = gates_diff + channels_ * num_ * 2;
+  Dtype* input_values_diff = gates_diff + channels_ * num_ * 3;
+
+  const int count = num_ * channels_;
+  BackwardGates<Dtype><<<CAFFE_GET_BLOCKS(count), CAFFE_CUDA_NUM_THREADS>>>(
+    count,
+    input_gates,
+    forget_gates,
+    output_gates,
+    input_values,
+    input_gates_diff,
+    forget_gates_diff,
+    output_gates_diff,
+    input_values_diff);
+
+  CUDA_POST_KERNEL_CHECK;
+
+  Dtype* input_weight_diff = this->blobs_[0]->mutable_gpu_diff();
+  Dtype* input_gate_weight_diff = this->blobs_[1]->mutable_gpu_diff();
+  Dtype* forget_gate_weight_diff = this->blobs_[2]->mutable_gpu_diff();
+  Dtype* output_gate_weight_diff = this->blobs_[3]->mutable_gpu_diff();
+
+  Dtype* input_diff = bottom[0]->mutable_gpu_diff();
+  Dtype* prev_state_diff = bottom[1]->mutable_gpu_diff();
+
+  const Dtype* next_hidden_state_diff = top[0]->gpu_diff();
+  const Dtype* next_memory_state = top[1]->gpu_data();
+  const Dtype* next_memory_state_diff = top[1]->gpu_diff();
+
+  Dtype* next_state_tot_diff = next_state_tot_diff_buffer_.mutable_gpu_data();
+  caffe_gpu_mul(num_ * channels_, output_gates, next_hidden_state_diff, next_state_tot_diff);
+  caffe_gpu_add(num_ * channels_, next_memory_state_diff, next_state_tot_diff, next_state_tot_diff);
+
+  caffe_gpu_mul(num_ * channels_, next_state_tot_diff, forget_gates, prev_state_diff);
+
+  Dtype* dldg_data = dldg_buffer_.mutable_gpu_data();
+
+  caffe_gpu_mul(num_ * channels_, input_gates, input_values_diff, dldg_data);
+  caffe_gpu_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_gpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., input_weight_diff);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, input_weight,
+    (Dtype)1., input_diff);
+
+  caffe_gpu_mul(num_ * channels_, input_gates_diff, input_values, dldg_data);
+  caffe_gpu_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_gpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., input_gate_weight_diff);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, input_gate_weight,
+    (Dtype)1., input_diff);
+
+  caffe_gpu_mul(num_ * channels_, forget_gates_diff, prev_state_data, dldg_data);
+  caffe_gpu_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_gpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)-1., dldg_data, input_data,
+    (Dtype)1., output_gate_weight_diff);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)-1., dldg_data, output_gate_weight,
+    (Dtype)1., input_diff);
+
+  caffe_gpu_mul(num_ * channels_, output_gates_diff, next_memory_state, dldg_data);
+  caffe_gpu_mul(num_ * channels_, next_hidden_state_diff, dldg_data, dldg_data);
+  caffe_gpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)1., output_gate_weight_diff);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, output_gate_weight,
+    (Dtype)1., input_diff);
+}
+
+INSTANTIATE_LAYER_GPU_FUNCS(LstmLayer);
+
+}  // namespace caffe
diff --git a/src/caffe/layers/slice_layer.cpp b/src/caffe/layers/slice_layer.cpp
index e4418c9..5ec5df4 100644
--- a/src/caffe/layers/slice_layer.cpp
+++ b/src/caffe/layers/slice_layer.cpp
@@ -67,25 +67,44 @@ void SliceLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
     }
   }
   CHECK_EQ(count, bottom[0]->count());
+  fast_wordvec_slice_ = (slice_axis_ == 2 &&
+    slice_param.fast_wordvec_slice());
 }
 
 template <typename Dtype>
 void SliceLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
       const vector<Blob<Dtype>*>& top) {
-  int offset_slice_axis = 0;
-  const Dtype* bottom_data = bottom[0]->cpu_data();
-  const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
-  for (int i = 0; i < top.size(); ++i) {
-    Dtype* top_data = top[i]->mutable_cpu_data();
-    const int top_slice_axis = top[i]->shape(slice_axis_);
-    for (int n = 0; n < num_slices_; ++n) {
-      const int top_offset = n * top_slice_axis * slice_size_;
-      const int bottom_offset =
-          (n * bottom_slice_axis + offset_slice_axis) * slice_size_;
-      caffe_copy(top_slice_axis * slice_size_,
-          bottom_data + bottom_offset, top_data + top_offset);
+  if (fast_wordvec_slice_) {
+    CHECK_EQ(bottom[0]->width(), 1);
+    const int top_size = top.size();
+    const Dtype* bottom_data = bottom[0]->cpu_data();
+    for (int i = 0; i < top_size; ++i) {
+      CHECK_EQ(top[i]->height(), 1);
+      Dtype* top_data = top[i]->mutable_cpu_data();
+      for (int n = 0; n < bottom[0]->num(); ++n) {
+        for (int c = 0; c < bottom[0]->channels(); ++c) {
+          // top height_ and width_ are assumed to be 1 from layer SetUp
+          const int idx = n * bottom[0]->channels() + c;
+          top_data[idx] = bottom_data[i + idx * top_size];
+        }
+      }
+    }
+  } else {
+    int offset_slice_axis = 0;
+    const Dtype* bottom_data = bottom[0]->cpu_data();
+    const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
+    for (int i = 0; i < top.size(); ++i) {
+      Dtype* top_data = top[i]->mutable_cpu_data();
+      const int top_slice_axis = top[i]->shape(slice_axis_);
+      for (int n = 0; n < num_slices_; ++n) {
+        const int top_offset = n * top_slice_axis * slice_size_;
+        const int bottom_offset =
+            (n * bottom_slice_axis + offset_slice_axis) * slice_size_;
+        caffe_copy(top_slice_axis * slice_size_,
+            bottom_data + bottom_offset, top_data + top_offset);
+      }
+      offset_slice_axis += top_slice_axis;
     }
-    offset_slice_axis += top_slice_axis;
   }
 }
 
@@ -93,20 +112,35 @@ template <typename Dtype>
 void SliceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
       const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
   if (!propagate_down[0]) { return; }
-  int offset_slice_axis = 0;
-  Dtype* bottom_diff = bottom[0]->mutable_cpu_diff();
-  const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
-  for (int i = 0; i < top.size(); ++i) {
-    const Dtype* top_diff = top[i]->cpu_diff();
-    const int top_slice_axis = top[i]->shape(slice_axis_);
-    for (int n = 0; n < num_slices_; ++n) {
-      const int top_offset = n * top_slice_axis * slice_size_;
-      const int bottom_offset =
-          (n * bottom_slice_axis + offset_slice_axis) * slice_size_;
-      caffe_copy(top_slice_axis * slice_size_,
-          top_diff + top_offset, bottom_diff + bottom_offset);
+  if (fast_wordvec_slice_) {
+    const int top_size = top.size();
+    Dtype* bottom_diff = bottom[0]->mutable_cpu_diff();
+    for (int i = 0; i < top_size; ++i) {
+      const Dtype* top_diff = top[i]->cpu_diff();
+      for (int n = 0; n < bottom[0]->num(); ++n) {
+        for (int c = 0; c < bottom[0]->channels(); ++c) {
+          // top height_ and width_ are assumed to be 1 from layer SetUp
+          const int idx = n * bottom[0]->channels() + c;
+          bottom_diff[i + idx * top_size] = top_diff[idx];
+        }
+      }
+    }
+  } else {
+    int offset_slice_axis = 0;
+    Dtype* bottom_diff = bottom[0]->mutable_cpu_diff();
+    const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
+    for (int i = 0; i < top.size(); ++i) {
+      const Dtype* top_diff = top[i]->cpu_diff();
+      const int top_slice_axis = top[i]->shape(slice_axis_);
+      for (int n = 0; n < num_slices_; ++n) {
+        const int top_offset = n * top_slice_axis * slice_size_;
+        const int bottom_offset =
+            (n * bottom_slice_axis + offset_slice_axis) * slice_size_;
+        caffe_copy(top_slice_axis * slice_size_,
+            top_diff + top_offset, bottom_diff + bottom_offset);
+      }
+      offset_slice_axis += top_slice_axis;
     }
-    offset_slice_axis += top_slice_axis;
   }
 }
 
diff --git a/src/caffe/layers/slice_layer.cu b/src/caffe/layers/slice_layer.cu
index e6e6567..33ebdf0 100644
--- a/src/caffe/layers/slice_layer.cu
+++ b/src/caffe/layers/slice_layer.cu
@@ -9,6 +9,10 @@ namespace caffe {
 template <typename Dtype>
 void SliceLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
       const vector<Blob<Dtype>*>& top) {
+  if (fast_wordvec_slice_) {
+    Forward_cpu(bottom, top);
+    return;
+  }
   int offset_slice_axis = 0;
   const Dtype* bottom_data = bottom[0]->gpu_data();
   const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
@@ -30,6 +34,10 @@ template <typename Dtype>
 void SliceLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
       const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
   if (!propagate_down[0]) { return; }
+  if (fast_wordvec_slice_) {
+    Backward_cpu(top, propagate_down, bottom);
+    return;
+  }
   int offset_slice_axis = 0;
   Dtype* bottom_diff = bottom[0]->mutable_gpu_diff();
   const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
diff --git a/src/caffe/layers/wordvec_layer.cpp b/src/caffe/layers/wordvec_layer.cpp
new file mode 100644
index 0000000..706aa43
--- /dev/null
+++ b/src/caffe/layers/wordvec_layer.cpp
@@ -0,0 +1,90 @@
+#include <vector>
+#include "caffe/layer.hpp"
+#include "caffe/util/math_functions.hpp"
+#include "caffe/vision_layers.hpp"
+
+namespace caffe {
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  WordvecParameter wordvec_param = this->layer_param_.wordvec_param();
+  CHECK((wordvec_param.has_dimension()))
+      << "wordvec_param.has_dimension()";
+  CHECK((wordvec_param.has_vocab_size()))
+      << "wordvec_param.has_vocab_size()";
+
+  num_ = bottom[0]->num();
+  dimension_ = wordvec_param.dimension();
+  vocab_size_ = wordvec_param.vocab_size();
+  sentence_length_ = bottom[0]->channels();
+
+  this->blobs_.resize(1);
+    this->blobs_[0].reset(new Blob<Dtype>(
+        1, vocab_size_, 1, dimension_));
+
+  shared_ptr<Filler<Dtype> > weight_filler(GetFiller<Dtype>(
+      wordvec_param.weight_filler()));
+  weight_filler->Fill(this->blobs_[0].get());
+
+  // Propagate gradients to the parameters (as directed by backward pass).
+  this->param_propagate_down_.resize(this->blobs_.size(), false);
+}
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  CHECK((this->layer_param_.bottom_size() == 1 || this->layer_param_.bottom_size() == 0))
+      << "Wordvec must have no more than one bottom";
+  CHECK((this->layer_param_.top_size() == 1 || this->layer_param_.top_size() == 0))
+      << "Wordvec must have no more than one top";
+  top[0]->Reshape(num_, dimension_, sentence_length_, 1);
+}
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  const Dtype* weights = this->blobs_[0]->cpu_data();
+  Dtype* bottom_data = bottom[0]->mutable_cpu_data();
+  Dtype* top_data = top[0]->mutable_cpu_data();
+
+  for (int n = 0; n < num_; ++n) {
+    for (int d = 0; d < dimension_; ++d) {
+      for (int i = 0; i < sentence_length_; ++i) {
+        const int word = static_cast<int>(bottom_data[i + n * sentence_length_]
+            + Dtype(0.5));
+        top_data[i + (d + (n * dimension_)) * sentence_length_] = weights[d + word * dimension_];
+      }
+    }
+  }
+}
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
+  Dtype* weights_diff = this->blobs_[0]->mutable_cpu_diff();
+  const Dtype* bottom_data = bottom[0]->cpu_data();
+  const Dtype* top_diff = top[0]->cpu_diff();
+
+  caffe_set(this->blobs_[0]->count(), Dtype(0), weights_diff);
+
+  for (int n = 0; n < num_; ++n) {
+    for (int d = 0; d < dimension_; ++d) {
+      for (int i = 0; i < sentence_length_; ++i) {
+        const int word = static_cast<int>(bottom_data[i + n * sentence_length_]
+            + Dtype(0.5));
+        weights_diff[d + word * dimension_] +=
+            top_diff[i + (d + (n * dimension_)) * sentence_length_];
+      }
+    }
+  }
+}
+
+#ifdef CPU_ONLY
+STUB_GPU(WordvecLayer);
+#endif
+
+INSTANTIATE_CLASS(WordvecLayer);
+REGISTER_LAYER_CLASS(Wordvec);
+
+}  // namespace caffe
diff --git a/src/caffe/layers/wordvec_layer.cu b/src/caffe/layers/wordvec_layer.cu
new file mode 100644
index 0000000..5c93377
--- /dev/null
+++ b/src/caffe/layers/wordvec_layer.cu
@@ -0,0 +1,22 @@
+#include <vector>
+#include "caffe/layer.hpp"
+#include "caffe/util/math_functions.hpp"
+#include "caffe/vision_layers.hpp"
+
+namespace caffe {
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  Forward_cpu(bottom, top);
+}
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
+  Backward_cpu(top, propagate_down, bottom);
+}
+
+INSTANTIATE_LAYER_GPU_FUNCS(WordvecLayer);
+
+}  // namespace caffe
diff --git a/src/caffe/net.cpp b/src/caffe/net.cpp
index fd00b12..d238452 100644
--- a/src/caffe/net.cpp
+++ b/src/caffe/net.cpp
@@ -411,12 +411,22 @@ void Net<Dtype>::AppendParam(const NetParameter& param, const int layer_id,
     // haven't already seen.
     param_owners_.push_back(-1);
     if (param_size) {
+      shared_param_owners_.push_back(true);
       param_names_index_[param_name] = net_param_id;
+      shared_ptr<Blob<Dtype> > new_master_diff(new Blob<Dtype>());
+      new_master_diff->ReshapeLike(*params_[net_param_id]);
+      master_diffs_index_[net_param_id] = master_diffs_.size();
+      master_diffs_.push_back(new_master_diff);
+    } else {
+      shared_param_owners_.push_back(false);
+      master_diffs_index_[net_param_id] = -1;
     }
   } else {
     // Named param blob with name we've seen before: share params
     const int owner_net_param_id = param_names_index_[param_name];
+    master_diffs_index_[net_param_id] = master_diffs_index_[owner_net_param_id];
     param_owners_.push_back(owner_net_param_id);
+    shared_param_owners_.push_back(false);
     const pair<int, int>& owner_index =
         param_layer_indices_[owner_net_param_id];
     const int owner_layer_id = owner_index.first;
@@ -439,6 +449,8 @@ void Net<Dtype>::AppendParam(const NetParameter& param, const int layer_id,
     }
     layers_[layer_id]->blobs()[param_id]->ShareData(
         *layers_[owner_layer_id]->blobs()[owner_param_id]);
+    layers_[layer_id]->blobs()[param_id]->ShareDiff(
+        *layers_[owner_layer_id]->blobs()[owner_param_id]);
   }
 }
 
@@ -533,11 +545,60 @@ template <typename Dtype>
 void Net<Dtype>::BackwardFromTo(int start, int end) {
   CHECK_GE(end, 0);
   CHECK_LT(start, layers_.size());
+  int net_param_id = params_.size() - 1;
   for (int i = start; i >= end; --i) {
     if (layer_need_backward_[i]) {
       layers_[i]->Backward(
           top_vecs_[i], bottom_need_backward_[i], bottom_vecs_[i]);
       if (debug_info_) { BackwardDebugInfo(i); }
+      for (int j = layers_[i]->blobs().size() - 1; j >= 0; --j) {
+        CHECK_EQ(param_layer_indices_[net_param_id].first, i);
+        CHECK_EQ(param_layer_indices_[net_param_id].second, j);
+        const int master_id = master_diffs_index_[net_param_id];
+        if (master_id >= 0) {
+#ifdef CPU_ONLY
+          caffe_add(master_diffs_[master_id]->count(),
+              layers_[i]->blobs()[j]->cpu_diff(),
+              master_diffs_[master_id]->cpu_diff(),
+              master_diffs_[master_id]->mutable_cpu_diff());
+#else
+          caffe_gpu_add(master_diffs_[master_id]->count(),
+              layers_[i]->blobs()[j]->gpu_diff(),
+              master_diffs_[master_id]->gpu_diff(),
+              master_diffs_[master_id]->mutable_gpu_diff());
+#endif
+        }
+        net_param_id--;
+      }
+    }
+    else {
+        net_param_id = net_param_id - layers_[i]->blobs().size();
+    }
+  }
+  for (int i = params_.size() - 1; i >= 0; --i) {
+    if (!shared_param_owners_[i]) { continue; }
+    const int count = params_[i]->count();
+    Dtype* this_diff;
+    Dtype* master_diff;
+    switch (Caffe::mode()) {
+    case Caffe::CPU:
+      this_diff = params_[i]->mutable_cpu_diff();
+      master_diff = master_diffs_[master_diffs_index_[i]]->mutable_cpu_diff();
+      caffe_copy(count, master_diff, this_diff);
+      caffe_set(count, Dtype(0), master_diff);
+      break;
+#ifndef CPU_ONLY
+    case Caffe::GPU:
+      this_diff = params_[i]->mutable_gpu_diff();
+      master_diff = master_diffs_[master_diffs_index_[i]]->mutable_gpu_diff();
+      caffe_copy(count, master_diff, this_diff);
+      caffe_gpu_set(count, Dtype(0), master_diff);
+      break;
+#else
+      NO_GPU;
+#endif
+    default:
+      LOG(FATAL) << "Unknown caffe mode: " << Caffe::mode();
     }
   }
 }
@@ -727,7 +788,21 @@ void Net<Dtype>::ToProto(NetParameter* param, bool write_diff) const {
     param->add_input(blob_names_[net_input_blob_indices_[i]]);
   }
   DLOG(INFO) << "Serializing " << layers_.size() << " layers";
+  int net_param_id = 0;
   for (int i = 0; i < layers_.size(); ++i) {
+    bool shared_param_layer = layers_[i]->blobs().size() ? true : false;
+    for (int j = 0; j < layers_[i]->blobs().size(); ++j) {
+      CHECK_EQ(param_layer_indices_[net_param_id].first, i);
+      CHECK_EQ(param_layer_indices_[net_param_id].second, j);
+      if (param_owners_[net_param_id] < 0 ||
+            param_owners_[net_param_id] == net_param_id) {
+        shared_param_layer = false;
+      }
+      net_param_id++;
+    }
+    if (shared_param_layer) {
+      continue;
+    }
     LayerParameter* layer_param = param->add_layer();
     for (int j = 0; j < bottom_id_vecs_[i].size(); ++j) {
       layer_param->add_bottom(blob_names_[bottom_id_vecs_[i][j]]);
@@ -741,34 +816,6 @@ void Net<Dtype>::ToProto(NetParameter* param, bool write_diff) const {
 
 template <typename Dtype>
 void Net<Dtype>::Update() {
-  // First, accumulate the diffs of any shared parameters into their owner's
-  // diff. (Assumes that the learning rate, weight decay, etc. have already been
-  // accounted for in the current diff.)
-  for (int i = 0; i < params_.size(); ++i) {
-    if (param_owners_[i] < 0) { continue; }
-    if (debug_info_) { UpdateDebugInfo(i); }
-    const int count = params_[i]->count();
-    const Dtype* this_diff;
-    Dtype* owner_diff;
-    switch (Caffe::mode()) {
-    case Caffe::CPU:
-      this_diff = params_[i]->cpu_diff();
-      owner_diff = params_[param_owners_[i]]->mutable_cpu_diff();
-      caffe_add(count, this_diff, owner_diff, owner_diff);
-      break;
-#ifndef CPU_ONLY
-    case Caffe::GPU:
-      this_diff = params_[i]->gpu_diff();
-      owner_diff = params_[param_owners_[i]]->mutable_gpu_diff();
-      caffe_gpu_add(count, this_diff, owner_diff, owner_diff);
-      break;
-#else
-      NO_GPU;
-#endif
-    default:
-      LOG(FATAL) << "Unknown caffe mode: " << Caffe::mode();
-    }
-  }
   // Now, update the owned parameters.
   for (int i = 0; i < params_.size(); ++i) {
     if (param_owners_[i] >= 0) { continue; }
diff --git a/src/caffe/proto/caffe.proto b/src/caffe/proto/caffe.proto
index 5b21cf2..51e62a3 100644
--- a/src/caffe/proto/caffe.proto
+++ b/src/caffe/proto/caffe.proto
@@ -319,6 +319,7 @@ message LayerParameter {
   optional InfogainLossParameter infogain_loss_param = 116;
   optional InnerProductParameter inner_product_param = 117;
   optional LRNParameter lrn_param = 118;
+  optional LstmParameter lstm_param = 201;
   optional MemoryDataParameter memory_data_param = 119;
   optional MVNParameter mvn_param = 120;
   optional PoolingParameter pooling_param = 121;
@@ -332,6 +333,7 @@ message LayerParameter {
   optional TanHParameter tanh_param = 127;
   optional ThresholdParameter threshold_param = 128;
   optional WindowDataParameter window_data_param = 129;
+  optional WordvecParameter wordvec_param = 202;
 }
 
 // Message that stores parameters used to apply transformation
@@ -397,6 +399,7 @@ message ConcatParameter {
 
   // DEPRECATED: alias for "axis" -- does not support negative indexing.
   optional uint32 concat_dim = 1 [default = 1];
+  optional bool fast_lstm_concat = 3 [default = false];
 }
 
 // Message that stores parameters used by ContrastiveLossLayer
@@ -431,6 +434,26 @@ message ConvolutionParameter {
   optional Engine engine = 15 [default = DEFAULT];
 }
 
+message LstmParameter {
+  optional uint32 num_cells = 1;
+  optional FillerParameter input_weight_filler = 2; // The filler for the weight
+  optional FillerParameter input_gate_weight_filler = 3; // The filler for the weight
+  optional FillerParameter forget_gate_weight_filler = 4; // The filler for the weight
+  optional FillerParameter output_gate_weight_filler = 5; // The filler for the weight
+}
+
+message SoftmaxProductParameter {
+  optional uint32 num_output = 1; // The number of outputs for the layer
+  optional uint32 num_categories = 2; // The number of categories
+  optional FillerParameter weight_filler = 3; // The filler for the weight
+}
+
+message WordvecParameter {
+  optional uint32 dimension = 1;
+  optional uint32 vocab_size = 2;
+  optional FillerParameter weight_filler = 3; // The filler for the weight
+}
+
 // Message that stores parameters used by DataLayer
 message DataParameter {
   enum DB {
@@ -698,6 +721,7 @@ message SliceParameter {
   // (e.g., -1 for the last axis).
   // By default, SliceLayer concatenates blobs along the "channels" axis (1).
   optional int32 axis = 3 [default = 1];
+  optional bool fast_wordvec_slice = 4 [default = false];
   repeated uint32 slice_point = 2;
 
   // DEPRECATED: alias for "axis" -- does not support negative indexing.
diff --git a/src/caffe/solver.cpp b/src/caffe/solver.cpp
index 096980d..08323ff 100644
--- a/src/caffe/solver.cpp
+++ b/src/caffe/solver.cpp
@@ -474,6 +474,7 @@ void SGDSolver<Dtype>::ComputeUpdateValue() {
       Dtype local_rate = rate * net_params_lr[param_id];
       Dtype local_decay = weight_decay * net_params_weight_decay[param_id];
 
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       if (local_decay) {
         if (regularization_type == "L2") {
           // add weight decay
@@ -494,13 +495,19 @@ void SGDSolver<Dtype>::ComputeUpdateValue() {
         }
       }
 
-      caffe_cpu_axpby(net_params[param_id]->count(), local_rate,
-                net_params[param_id]->cpu_diff(), momentum,
-                history_[param_id]->mutable_cpu_data());
-      // copy
-      caffe_copy(net_params[param_id]->count(),
-          history_[param_id]->cpu_data(),
-          net_params[param_id]->mutable_cpu_diff());
+      if (momentum > Dtype(0)) {
+        caffe_cpu_axpby(net_params[param_id]->count(), local_rate,
+                  net_params[param_id]->cpu_diff(), momentum,
+                  history_[param_id]->mutable_cpu_data());
+        // copy
+        caffe_copy(net_params[param_id]->count(),
+            history_[param_id]->cpu_data(),
+            net_params[param_id]->mutable_cpu_diff());
+      } else {
+        caffe_scal(net_params[param_id]->count(),
+            local_rate,
+            net_params[param_id]->mutable_cpu_diff());
+      }
     }
     break;
   case Caffe::GPU:
@@ -510,6 +517,7 @@ void SGDSolver<Dtype>::ComputeUpdateValue() {
       Dtype local_rate = rate * net_params_lr[param_id];
       Dtype local_decay = weight_decay * net_params_weight_decay[param_id];
 
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       if (local_decay) {
         if (regularization_type == "L2") {
           // add weight decay
@@ -530,13 +538,19 @@ void SGDSolver<Dtype>::ComputeUpdateValue() {
         }
       }
 
-      caffe_gpu_axpby(net_params[param_id]->count(), local_rate,
-                net_params[param_id]->gpu_diff(), momentum,
-                history_[param_id]->mutable_gpu_data());
-      // copy
-      caffe_copy(net_params[param_id]->count(),
-          history_[param_id]->gpu_data(),
-          net_params[param_id]->mutable_gpu_diff());
+      if (momentum > Dtype(0)) {
+        caffe_gpu_axpby(net_params[param_id]->count(), local_rate,
+                  net_params[param_id]->gpu_diff(), momentum,
+                  history_[param_id]->mutable_gpu_data());
+        // copy
+        caffe_copy(net_params[param_id]->count(),
+            history_[param_id]->gpu_data(),
+            net_params[param_id]->mutable_gpu_diff());
+      } else {
+        caffe_gpu_scal(net_params[param_id]->count(),
+            local_rate,
+            net_params[param_id]->mutable_gpu_diff());
+      }
     }
 #else
     NO_GPU;
@@ -553,7 +567,9 @@ void SGDSolver<Dtype>::SnapshotSolverState(SolverState* state) {
   for (int i = 0; i < history_.size(); ++i) {
     // Add history
     BlobProto* history_blob = state->add_history();
-    history_[i]->ToProto(history_blob);
+    if (this->param_.momentum() > 0) {
+      history_[i]->ToProto(history_blob);
+    }
   }
 }
 
@@ -563,7 +579,9 @@ void SGDSolver<Dtype>::RestoreSolverState(const SolverState& state) {
       << "Incorrect length of history blobs.";
   LOG(INFO) << "SGDSolver: restoring history";
   for (int i = 0; i < history_.size(); ++i) {
-    history_[i]->FromProto(state.history(i));
+    if (this->param_.momentum() > 0) {
+      history_[i]->FromProto(state.history(i));
+    }
   }
 }
 
@@ -585,6 +603,7 @@ void NesterovSolver<Dtype>::ComputeUpdateValue() {
   switch (Caffe::mode()) {
   case Caffe::CPU:
     for (int param_id = 0; param_id < net_params.size(); ++param_id) {
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       // save history momentum for stepping back
       caffe_copy(net_params[param_id]->count(),
           this->history_[param_id]->cpu_data(),
@@ -632,6 +651,7 @@ void NesterovSolver<Dtype>::ComputeUpdateValue() {
   case Caffe::GPU:
 #ifndef CPU_ONLY
     for (int param_id = 0; param_id < net_params.size(); ++param_id) {
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       // save history momentum for stepping back
       caffe_copy(net_params[param_id]->count(),
           this->history_[param_id]->gpu_data(),
@@ -702,6 +722,7 @@ void AdaGradSolver<Dtype>::ComputeUpdateValue() {
   switch (Caffe::mode()) {
   case Caffe::CPU:
     for (int param_id = 0; param_id < net_params.size(); ++param_id) {
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       Dtype local_rate = rate * net_params_lr[param_id];
       Dtype local_decay = weight_decay * net_params_weight_decay[param_id];
 
@@ -758,6 +779,7 @@ void AdaGradSolver<Dtype>::ComputeUpdateValue() {
   case Caffe::GPU:
 #ifndef CPU_ONLY
     for (int param_id = 0; param_id < net_params.size(); ++param_id) {
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       Dtype local_rate = rate * net_params_lr[param_id];
       Dtype local_decay = weight_decay * net_params_weight_decay[param_id];
 
diff --git a/src/caffe/test/test_gradient_based_solver.cpp b/src/caffe/test/test_gradient_based_solver.cpp
index eb2569c..caea48f 100644
--- a/src/caffe/test/test_gradient_based_solver.cpp
+++ b/src/caffe/test/test_gradient_based_solver.cpp
@@ -322,23 +322,6 @@ class SGDSolverTest : public GradientBasedSolverTest<TypeParam> {
 
 TYPED_TEST_CASE(SGDSolverTest, TestDtypesAndDevices);
 
-TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdate) {
-  this->TestLeastSquaresUpdate();
-}
-
-TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateLROneTenth) {
-  typedef typename TypeParam::Dtype Dtype;
-  const Dtype kLearningRate = 0.1;
-  this->TestLeastSquaresUpdate(kLearningRate);
-}
-
-TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecay) {
-  typedef typename TypeParam::Dtype Dtype;
-  const Dtype kLearningRate = 1.0;
-  const Dtype kWeightDecay = 0.5;
-  this->TestLeastSquaresUpdate(kLearningRate, kWeightDecay);
-}
-
 TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithMomentum) {
   typedef typename TypeParam::Dtype Dtype;
   const Dtype kLearningRate = 1.0;
diff --git a/src/caffe/test/test_lstm_layer.cpp b/src/caffe/test/test_lstm_layer.cpp
new file mode 100644
index 0000000..102b3ef
--- /dev/null
+++ b/src/caffe/test/test_lstm_layer.cpp
@@ -0,0 +1,120 @@
+#include <algorithm>
+#include <cstring>
+#include <vector>
+
+#include "gtest/gtest.h"
+
+#include "caffe/blob.hpp"
+#include "caffe/common.hpp"
+#include "caffe/filler.hpp"
+#include "caffe/vision_layers.hpp"
+
+#include "caffe/test/test_caffe_main.hpp"
+#include "caffe/test/test_gradient_check_util.hpp"
+
+#define NUM_CELLS 3
+#define BATCH_SIZE 4
+#define INPUT_DATA_SIZE 5
+
+using std::min;
+using std::max;
+
+namespace caffe {
+
+template <typename TypeParam>
+class LstmLayerTest : public MultiDeviceTest<TypeParam> {
+  typedef typename TypeParam::Dtype Dtype;
+
+ protected:
+  LstmLayerTest()
+      : epsilon_(Dtype(1e-5)),
+        blob_bottom_(new Blob<Dtype>()),
+        blob_bottom2_(new Blob<Dtype>()),
+        blob_top_(new Blob<Dtype>()),
+        blob_top2_(new Blob<Dtype>()) {}
+  virtual void SetUp() {
+    Caffe::set_random_seed(1601);
+    blob_bottom_->Reshape(BATCH_SIZE, INPUT_DATA_SIZE, 1, 1);
+    blob_bottom2_->Reshape(BATCH_SIZE, NUM_CELLS, 1, 1);
+    // fill the values
+    FillerParameter filler_param;
+    GaussianFiller<Dtype> filler(filler_param);
+    GaussianFiller<Dtype> filler2(filler_param);
+    filler.Fill(this->blob_bottom_);
+    filler2.Fill(this->blob_bottom2_);
+    blob_bottom_vec_.push_back(blob_bottom_);
+    blob_bottom_vec_.push_back(blob_bottom2_);
+    blob_top_vec_.push_back(blob_top_);
+    blob_top_vec_.push_back(blob_top2_);
+  }
+  virtual ~LstmLayerTest() { delete blob_bottom_; delete blob_bottom2_; delete blob_top_; delete blob_top2_; }
+  void ReferenceLstmForward(const Blob<Dtype>& blob_bottom,
+      const LayerParameter& layer_param, Blob<Dtype>* blob_top);
+
+  Dtype epsilon_;
+  Blob<Dtype>* const blob_bottom_;
+  Blob<Dtype>* const blob_bottom2_;
+  Blob<Dtype>* const blob_top_;
+  Blob<Dtype>* const blob_top2_;
+  vector<Blob<Dtype>*> blob_bottom_vec_;
+  vector<Blob<Dtype>*> blob_top_vec_;
+};
+
+template <typename TypeParam>
+void LstmLayerTest<TypeParam>::ReferenceLstmForward(
+    const Blob<Dtype>& blob_bottom, const LayerParameter& layer_param,
+    Blob<Dtype>* blob_top) {
+  typedef typename TypeParam::Dtype Dtype;
+  blob_top->Reshape(blob_bottom.num(), blob_bottom.channels(),
+      blob_bottom.height(), blob_bottom.width());
+  Dtype* top_data = blob_top->mutable_cpu_data();
+  LstmParameter lstm_param = layer_param.lstm_param();
+}
+
+TYPED_TEST_CASE(LstmLayerTest, TestDtypesAndDevices);
+
+TYPED_TEST(LstmLayerTest, TestSetupAcrossChannels) {
+  typedef typename TypeParam::Dtype Dtype;
+  LayerParameter layer_param;
+  LstmParameter* lstm_param = layer_param.mutable_lstm_param();
+  lstm_param->set_num_cells(NUM_CELLS);
+  lstm_param->mutable_input_weight_filler()->set_type("xavier");
+  lstm_param->mutable_input_gate_weight_filler()->set_type("xavier");
+  lstm_param->mutable_forget_gate_weight_filler()->set_type("xavier");
+  lstm_param->mutable_output_gate_weight_filler()->set_type("xavier");
+  LstmLayer<Dtype> layer(layer_param);
+  layer.SetUp(this->blob_bottom_vec_, this->blob_top_vec_);
+  EXPECT_EQ(this->blob_top_->num(), BATCH_SIZE);
+  EXPECT_EQ(this->blob_top_->channels(), NUM_CELLS);
+  EXPECT_EQ(this->blob_top_->height(), 1);
+  EXPECT_EQ(this->blob_top_->width(), 1);
+}
+
+TYPED_TEST(LstmLayerTest, TestGradientAcrossChannels) {
+  typedef typename TypeParam::Dtype Dtype;
+  LayerParameter layer_param;
+  LstmParameter* lstm_param = layer_param.mutable_lstm_param();
+  lstm_param->set_num_cells(NUM_CELLS);
+  lstm_param->mutable_input_weight_filler()->set_type("xavier");
+  lstm_param->mutable_input_gate_weight_filler()->set_type("xavier");
+  lstm_param->mutable_forget_gate_weight_filler()->set_type("xavier");
+  lstm_param->mutable_output_gate_weight_filler()->set_type("xavier");
+
+  LstmLayer<Dtype> layer(layer_param);
+  GradientChecker<Dtype> checker(1e-2, 1e-2);
+  layer.SetUp(this->blob_bottom_vec_, this->blob_top_vec_);
+  layer.Forward(this->blob_bottom_vec_, this->blob_top_vec_);
+  for (int i = 0; i < this->blob_top_->count(); ++i) {
+    this->blob_top_->mutable_cpu_diff()[i] = 1.;
+  }
+  for (int i = 0; i < this->blob_top2_->count(); ++i) {
+    this->blob_top2_->mutable_cpu_diff()[i] = 1.;
+  }
+  vector<bool> propagate_down(this->blob_bottom_vec_.size(), true);
+  layer.Backward(this->blob_top_vec_, propagate_down,
+                 this->blob_bottom_vec_);
+  checker.CheckGradientExhaustive(&layer, this->blob_bottom_vec_,
+      this->blob_top_vec_);
+}
+
+}  // namespace caffe
diff --git a/src/caffe/test/test_net.cpp b/src/caffe/test/test_net.cpp
index 08106e7..9d33089 100644
--- a/src/caffe/test/test_net.cpp
+++ b/src/caffe/test/test_net.cpp
@@ -1009,9 +1009,8 @@ TYPED_TEST(NetTest, TestSharedWeightsUpdate) {
   Blob<Dtype>* ip2_weights = this->net_->layers()[2]->blobs()[0].get();
   // Check that data blobs of shared weights share the same location in memory.
   EXPECT_EQ(ip1_weights->cpu_data(), ip2_weights->cpu_data());
-  // Check that diff blobs of shared weights are at different locations in
-  // memory.  (The diffs should be accumulated at update time.)
-  EXPECT_NE(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
+  // Check that diff blobs of shared weights share the same location in memory.
+  EXPECT_EQ(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
   this->net_->Forward(bottom);
   this->net_->Backward();
   // Compute the expected update as the data minus the two diffs.
@@ -1025,10 +1024,10 @@ TYPED_TEST(NetTest, TestSharedWeightsUpdate) {
   for (int i = 0; i < count; ++i) {
     EXPECT_NE(0, ip1_weights->cpu_diff()[i]);
     EXPECT_NE(0, ip2_weights->cpu_diff()[i]);
-    EXPECT_NE(ip1_weights->cpu_diff()[i], ip2_weights->cpu_diff()[i]);
+    EXPECT_EQ(ip1_weights->cpu_diff()[i], ip2_weights->cpu_diff()[i]);
   }
-  caffe_axpy(count, Dtype(1), ip2_weights->cpu_diff(),
-             shared_params.mutable_cpu_diff());
+  //caffe_axpy(count, Dtype(1), ip2_weights->cpu_diff(),
+             //shared_params.mutable_cpu_diff());
   caffe_axpy(count, Dtype(-1), shared_params.cpu_diff(),
              shared_params.mutable_cpu_data());
   const Dtype* expected_updated_params = shared_params.cpu_data();
@@ -1098,9 +1097,8 @@ TYPED_TEST(NetTest, TestSharedWeightsResume) {
   Blob<Dtype>* ip2_weights = this->net_->layers()[2]->blobs()[0].get();
   // Check that data blobs of shared weights share the same location in memory.
   EXPECT_EQ(ip1_weights->cpu_data(), ip2_weights->cpu_data());
-  // Check that diff blobs of shared weights are at different locations in
-  // memory.  (The diffs should be accumulated at update time.)
-  EXPECT_NE(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
+  // Check that diff blobs of shared weights share the same location in memory.
+  EXPECT_EQ(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
   this->net_->ForwardBackward(bottom);
   this->net_->Update();
   Blob<Dtype> shared_params;
@@ -1128,9 +1126,8 @@ TYPED_TEST(NetTest, TestSharedWeightsResume) {
   for (int i = 0; i < count; ++i) {
     EXPECT_FLOAT_EQ(shared_params.cpu_data()[i], ip1_weights->cpu_data()[i]);
   }
-  // Check that diff blobs of shared weights are at different locations in
-  // memory.  (The diffs should be accumulated at update time.)
-  EXPECT_NE(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
+  // Check that diff blobs of shared weights share the same location in memory.
+  EXPECT_EQ(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
 }
 
 TYPED_TEST(NetTest, TestParamPropagateDown) {
diff --git a/src/caffe/test/test_slice_layer.cpp b/src/caffe/test/test_slice_layer.cpp
index ccd0364..15bff31 100644
--- a/src/caffe/test/test_slice_layer.cpp
+++ b/src/caffe/test/test_slice_layer.cpp
@@ -38,7 +38,7 @@ class SliceLayerTest : public MultiDeviceTest<TypeParam> {
   }
 
   virtual void ReduceBottomBlobSize() {
-    blob_bottom_->Reshape(4, 5, 2, 2);
+    blob_bottom_->Reshape(4, 5, 2, 1);
     FillerParameter filler_param;
     GaussianFiller<Dtype> filler(filler_param);
     filler.Fill(this->blob_bottom_);
@@ -186,4 +186,17 @@ TYPED_TEST(SliceLayerTest, TestGradientAcrossChannels) {
     this->blob_top_vec_0_);
 }
 
+TYPED_TEST(SliceLayerTest, TestGradientAcrossHeight) {
+  typedef typename TypeParam::Dtype Dtype;
+  // Gradient checks are slow; reduce blob size.
+  this->ReduceBottomBlobSize();
+  LayerParameter layer_param;
+  layer_param.mutable_slice_param()->set_axis(2);
+  layer_param.mutable_slice_param()->set_fast_wordvec_slice(true);
+  SliceLayer<Dtype> layer(layer_param);
+  GradientChecker<Dtype> checker(1e-2, 1e-3);
+  checker.CheckGradientExhaustive(&layer, this->blob_bottom_vec_,
+    this->blob_top_vec_0_);
+}
+
 }  // namespace caffe
diff --git a/src/caffe/test/test_wordvec_layer.cpp b/src/caffe/test/test_wordvec_layer.cpp
new file mode 100644
index 0000000..85e20f0
--- /dev/null
+++ b/src/caffe/test/test_wordvec_layer.cpp
@@ -0,0 +1,100 @@
+#include <algorithm>
+#include <cstring>
+#include <vector>
+
+#include "gtest/gtest.h"
+
+#include "caffe/blob.hpp"
+#include "caffe/common.hpp"
+#include "caffe/filler.hpp"
+#include "caffe/vision_layers.hpp"
+
+#include "caffe/test/test_caffe_main.hpp"
+#include "caffe/test/test_gradient_check_util.hpp"
+
+using std::min;
+using std::max;
+
+#define BATCH_SIZE 2
+#define VOCAB_SIZE 10
+#define DIMENSION 15
+#define SENTENCE_LENGTH 3
+
+namespace caffe {
+
+template <typename TypeParam>
+class WordvecLayerTest : public MultiDeviceTest<TypeParam> {
+  typedef typename TypeParam::Dtype Dtype;
+
+ protected:
+  WordvecLayerTest()
+      : epsilon_(Dtype(1e-5)),
+        blob_bottom_(new Blob<Dtype>()),
+        blob_top_(new Blob<Dtype>()) {}
+  virtual void SetUp() {
+    Caffe::set_random_seed(1601);
+    blob_bottom_->Reshape(BATCH_SIZE, SENTENCE_LENGTH, 1, 1);
+    // fill the values
+    Dtype * bottom_data = this->blob_bottom_->mutable_cpu_data();
+    for (int n = 0; n < BATCH_SIZE; ++n) {
+      for (int i = 0; i < SENTENCE_LENGTH; ++i) {
+        bottom_data[i + n * SENTENCE_LENGTH] = caffe_rng_rand() % VOCAB_SIZE;
+      }
+    }
+    blob_bottom_vec_.push_back(blob_bottom_);
+    blob_top_vec_.push_back(blob_top_);
+  }
+  virtual ~WordvecLayerTest() { delete blob_bottom_; delete blob_top_; }
+  void ReferenceWordvecForward(const Blob<Dtype>& blob_bottom,
+      const LayerParameter& layer_param, Blob<Dtype>* blob_top);
+
+  Dtype epsilon_;
+  Blob<Dtype>* const blob_bottom_;
+  Blob<Dtype>* const blob_top_;
+  vector<Blob<Dtype>*> blob_bottom_vec_;
+  vector<Blob<Dtype>*> blob_top_vec_;
+};
+
+template <typename TypeParam>
+void WordvecLayerTest<TypeParam>::ReferenceWordvecForward(
+    const Blob<Dtype>& blob_bottom, const LayerParameter& layer_param,
+    Blob<Dtype>* blob_top) {
+  typedef typename TypeParam::Dtype Dtype;
+  blob_top->Reshape(blob_bottom.num(), blob_bottom.channels(),
+      blob_bottom.height(), blob_bottom.width());
+  Dtype* top_data = blob_top->mutable_cpu_data();
+  WordvecParameter wordvec_param = layer_param.wordvec_param();
+}
+
+TYPED_TEST_CASE(WordvecLayerTest, TestDtypesAndDevices);
+
+TYPED_TEST(WordvecLayerTest, TestSetupAcrossChannels) {
+  typedef typename TypeParam::Dtype Dtype;
+  LayerParameter layer_param;
+  WordvecParameter* wordvec_param = layer_param.mutable_wordvec_param();
+  wordvec_param->set_vocab_size(VOCAB_SIZE);
+  wordvec_param->set_dimension(DIMENSION);
+  wordvec_param->mutable_weight_filler()->set_type("xavier");
+  WordvecLayer<Dtype> layer(layer_param);
+  layer.SetUp(this->blob_bottom_vec_, this->blob_top_vec_);
+  EXPECT_EQ(this->blob_top_->num(), BATCH_SIZE);
+  EXPECT_EQ(this->blob_top_->channels(), DIMENSION);
+  EXPECT_EQ(this->blob_top_->height(), SENTENCE_LENGTH);
+  EXPECT_EQ(this->blob_top_->width(), 1);
+}
+
+TYPED_TEST(WordvecLayerTest, TestGradientAcrossChannels) {
+  typedef typename TypeParam::Dtype Dtype;
+  LayerParameter layer_param;
+  WordvecParameter* wordvec_param = layer_param.mutable_wordvec_param();
+  wordvec_param->set_vocab_size(VOCAB_SIZE);
+  wordvec_param->set_dimension(DIMENSION);
+  wordvec_param->mutable_weight_filler()->set_type("xavier");
+  WordvecLayer<Dtype> layer(layer_param);
+
+  GradientChecker<Dtype> checker(1e-2, 1e-2, 1601);
+  checker.CheckGradientExhaustive(&layer, this->blob_bottom_vec_,
+                 this->blob_top_vec_, -2);
+}
+
+}  // namespace caffe
diff --git a/src/caffe/util/math_functions.cu b/src/caffe/util/math_functions.cu
index 43e65eb..1eb7959 100644
--- a/src/caffe/util/math_functions.cu
+++ b/src/caffe/util/math_functions.cu
@@ -12,6 +12,36 @@
 
 namespace caffe {
 
+template<>
+void caffe_gpu_transpose<float>(const int M, const int N, const float* A, float* C) {
+  // C is MxN
+  // Takes as input a M x N matrix A stored in row major order and returns
+  // the same M x N matrix C stored in column major order
+  CHECK_NE(A, C);
+  int lda = N;
+  int ldb = M;
+  int ldc = M;
+  const float alpha = 1.0f;
+  const float beta = 0.0f;
+  CUBLAS_CHECK(cublasSgeam(Caffe::cublas_handle(), CUBLAS_OP_T, CUBLAS_OP_N, M, N, &alpha, A, lda, &beta,
+      NULL, ldb, C, ldc));
+}
+
+template<>
+void caffe_gpu_transpose<double>(const int M, const int N, const double* A, double* C) {
+  // C is MxN
+  // Takes as input a M x N matrix A stored in row major order and returns
+  // the same M x N matrix C stored in column major order
+  CHECK_NE(A, C);
+  int lda = N;
+  int ldb = M;
+  int ldc = M;
+  const double alpha = 1.0f;
+  const double beta = 0.0f;
+  CUBLAS_CHECK(cublasDgeam(Caffe::cublas_handle(), CUBLAS_OP_T, CUBLAS_OP_N, M, N, &alpha, A, lda, &beta,
+      NULL, ldb, C, ldc));
+}
+
 template <>
 void caffe_gpu_gemm<float>(const CBLAS_TRANSPOSE TransA,
     const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K,
